
RenderDisplay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000114  00800060  000005e2  00000676  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000106  00800174  00800174  0000078a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000078a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  000007f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b63  00000000  00000000  00000878  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006d0  00000000  00000000  000013db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005a0  00000000  00000000  00001aab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000154  00000000  00000000  0000204c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000426  00000000  00000000  000021a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000558  00000000  00000000  000025c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00002b1e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ee       	ldi	r30, 0xE2	; 226
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	22 e0       	ldi	r18, 0x02	; 2
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 37       	cpi	r26, 0x7A	; 122
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <main>
  8a:	0c 94 ef 02 	jmp	0x5de	; 0x5de <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <reset>:
const int gx[GHOST_COUNT] = {13};
const int gy[GHOST_COUNT] = {5};


void reset() {
	PORTC |= 0b11000000;
  92:	85 b3       	in	r24, 0x15	; 21
  94:	80 6c       	ori	r24, 0xC0	; 192
  96:	85 bb       	out	0x15, r24	; 21
  98:	08 95       	ret

0000009a <ledMatrixInit>:
	C - A6
	D - A7
	Control - C7
	*/
	
	DDRA = 0b11111111;
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0b11001111;
  9e:	8f ec       	ldi	r24, 0xCF	; 207
  a0:	84 bb       	out	0x14, r24	; 20
	PORTC |= 0b11000000;
  a2:	85 b3       	in	r24, 0x15	; 21
  a4:	80 6c       	ori	r24, 0xC0	; 192
  a6:	85 bb       	out	0x15, r24	; 21
  a8:	08 95       	ret

000000aa <controlInit>:
}

void controlInit() {
	// B0, B1
	DDRB &= 0b11111100;
  aa:	87 b3       	in	r24, 0x17	; 23
  ac:	8c 7f       	andi	r24, 0xFC	; 252
  ae:	87 bb       	out	0x17, r24	; 23
  b0:	08 95       	ret

000000b2 <buzzerInit>:
}

void buzzerInit() {
	// B2
	DDRB |= 0b00000100;
  b2:	ba 9a       	sbi	0x17, 2	; 23
  b4:	08 95       	ret

000000b6 <setBoardCommon>:
}

void setBoardCommon(unsigned char row) {
	PORTC &= 0xF0;
  b6:	95 b3       	in	r25, 0x15	; 21
  b8:	90 7f       	andi	r25, 0xF0	; 240
  ba:	95 bb       	out	0x15, r25	; 21
	PORTC |= (0x0F & row);
  bc:	95 b3       	in	r25, 0x15	; 21
  be:	8f 70       	andi	r24, 0x0F	; 15
  c0:	98 2b       	or	r25, r24
  c2:	95 bb       	out	0x15, r25	; 21
  c4:	08 95       	ret

000000c6 <setBoardRed>:
}


void setBoardRed(unsigned char column) {
	PORTC &= 0b10111111;
  c6:	ae 98       	cbi	0x15, 6	; 21
	PORTA &= 0xF0;
  c8:	9b b3       	in	r25, 0x1b	; 27
  ca:	90 7f       	andi	r25, 0xF0	; 240
  cc:	9b bb       	out	0x1b, r25	; 27
	PORTA |= (0x0F & column);
  ce:	9b b3       	in	r25, 0x1b	; 27
  d0:	8f 70       	andi	r24, 0x0F	; 15
  d2:	98 2b       	or	r25, r24
  d4:	9b bb       	out	0x1b, r25	; 27
  d6:	08 95       	ret

000000d8 <setBoardGreen>:
}


void setBoardGreen(unsigned char column) {
	PORTC &= 0b01111111;
  d8:	af 98       	cbi	0x15, 7	; 21
	PORTA &= 0x0F;
  da:	9b b3       	in	r25, 0x1b	; 27
  dc:	9f 70       	andi	r25, 0x0F	; 15
  de:	9b bb       	out	0x1b, r25	; 27
	PORTA |= (0xF0 & (column << 4));
  e0:	2b b3       	in	r18, 0x1b	; 27
  e2:	30 e1       	ldi	r19, 0x10	; 16
  e4:	83 9f       	mul	r24, r19
  e6:	c0 01       	movw	r24, r0
  e8:	11 24       	eor	r1, r1
  ea:	82 2b       	or	r24, r18
  ec:	8b bb       	out	0x1b, r24	; 27
  ee:	08 95       	ret

000000f0 <makeBoard>:
}

volatile unsigned char board[16][16];
void makeBoard() {
	for (int i=0; i<16; i++)
  f0:	a0 e0       	ldi	r26, 0x00	; 0
  f2:	b0 e0       	ldi	r27, 0x00	; 0
  f4:	10 c0       	rjmp	.+32     	; 0x116 <makeBoard+0x26>
		for (int j=0; j<16; j++)
			board[i][j] = background[i][j];
  f6:	fb 01       	movw	r30, r22
  f8:	e8 0f       	add	r30, r24
  fa:	f9 1f       	adc	r31, r25
  fc:	20 81       	ld	r18, Z
  fe:	fa 01       	movw	r30, r20
 100:	e8 0f       	add	r30, r24
 102:	f9 1f       	adc	r31, r25
 104:	20 83       	st	Z, r18
}

volatile unsigned char board[16][16];
void makeBoard() {
	for (int i=0; i<16; i++)
		for (int j=0; j<16; j++)
 106:	01 96       	adiw	r24, 0x01	; 1
 108:	80 31       	cpi	r24, 0x10	; 16
 10a:	91 05       	cpc	r25, r1
 10c:	a1 f7       	brne	.-24     	; 0xf6 <makeBoard+0x6>
	PORTA |= (0xF0 & (column << 4));
}

volatile unsigned char board[16][16];
void makeBoard() {
	for (int i=0; i<16; i++)
 10e:	11 96       	adiw	r26, 0x01	; 1
 110:	a0 31       	cpi	r26, 0x10	; 16
 112:	b1 05       	cpc	r27, r1
 114:	79 f0       	breq	.+30     	; 0x134 <makeBoard+0x44>
	PORTA &= 0x0F;
	PORTA |= (0xF0 & (column << 4));
}

volatile unsigned char board[16][16];
void makeBoard() {
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	90 e0       	ldi	r25, 0x00	; 0
	for (int i=0; i<16; i++)
		for (int j=0; j<16; j++)
			board[i][j] = background[i][j];
 11a:	ad 01       	movw	r20, r26
 11c:	42 95       	swap	r20
 11e:	52 95       	swap	r21
 120:	50 7f       	andi	r21, 0xF0	; 240
 122:	54 27       	eor	r21, r20
 124:	40 7f       	andi	r20, 0xF0	; 240
 126:	54 27       	eor	r21, r20
 128:	ba 01       	movw	r22, r20
 12a:	6c 59       	subi	r22, 0x9C	; 156
 12c:	7f 4f       	sbci	r23, 0xFF	; 255
 12e:	4c 58       	subi	r20, 0x8C	; 140
 130:	5e 4f       	sbci	r21, 0xFE	; 254
 132:	e1 cf       	rjmp	.-62     	; 0xf6 <makeBoard+0x6>
	
	board[px][py] = board[px+1][py] = board[px][py+1] = board[px+1][py+1] = 'P';
 134:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <px>
 138:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <px+0x1>
 13c:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <__data_start>
 140:	50 91 61 00 	lds	r21, 0x0061	; 0x800061 <__data_start+0x1>
 144:	fa 01       	movw	r30, r20
 146:	31 96       	adiw	r30, 0x01	; 1
 148:	9c 01       	movw	r18, r24
 14a:	22 95       	swap	r18
 14c:	32 95       	swap	r19
 14e:	30 7f       	andi	r19, 0xF0	; 240
 150:	32 27       	eor	r19, r18
 152:	20 7f       	andi	r18, 0xF0	; 240
 154:	32 27       	eor	r19, r18
 156:	2c 57       	subi	r18, 0x7C	; 124
 158:	3e 4f       	sbci	r19, 0xFE	; 254
 15a:	d9 01       	movw	r26, r18
 15c:	ae 0f       	add	r26, r30
 15e:	bf 1f       	adc	r27, r31
 160:	60 e5       	ldi	r22, 0x50	; 80
 162:	6c 93       	st	X, r22
 164:	82 95       	swap	r24
 166:	92 95       	swap	r25
 168:	90 7f       	andi	r25, 0xF0	; 240
 16a:	98 27       	eor	r25, r24
 16c:	80 7f       	andi	r24, 0xF0	; 240
 16e:	98 27       	eor	r25, r24
 170:	8c 58       	subi	r24, 0x8C	; 140
 172:	9e 4f       	sbci	r25, 0xFE	; 254
 174:	e8 0f       	add	r30, r24
 176:	f9 1f       	adc	r31, r25
 178:	60 83       	st	Z, r22
 17a:	f9 01       	movw	r30, r18
 17c:	e4 0f       	add	r30, r20
 17e:	f5 1f       	adc	r31, r21
 180:	60 83       	st	Z, r22
 182:	fc 01       	movw	r30, r24
 184:	e4 0f       	add	r30, r20
 186:	f5 1f       	adc	r31, r21
 188:	60 83       	st	Z, r22
	
	for (int i=0; i<GHOST_COUNT; i++)
	board[gx[i]][gy[i]] = board[gx[i]+1][gy[i]] = board[gx[i]][gy[i]+1] = board[gx[i]+1][gy[i]+1] =  '1';
 18a:	81 e3       	ldi	r24, 0x31	; 49
 18c:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <__data_end+0xe6>
 190:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <__data_end+0xd6>
 194:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <__data_end+0xe5>
 198:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <__data_end+0xd5>
 19c:	08 95       	ret

0000019e <displayBoard>:
}

void displayBoard() {
 19e:	ef 92       	push	r14
 1a0:	ff 92       	push	r15
 1a2:	0f 93       	push	r16
 1a4:	1f 93       	push	r17
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
	if (gameOver) {
 1aa:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <gameOver>
 1ae:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <gameOver+0x1>
 1b2:	89 2b       	or	r24, r25
 1b4:	09 f0       	breq	.+2      	; 0x1b8 <displayBoard+0x1a>
 1b6:	6f c0       	rjmp	.+222    	; 0x296 <displayBoard+0xf8>
 1b8:	e1 2c       	mov	r14, r1
 1ba:	f1 2c       	mov	r15, r1
		return ;
	}
	for (int i=0; i<16; i++) {
		setBoardCommon(i);
 1bc:	8e 2d       	mov	r24, r14
 1be:	0e 94 5b 00 	call	0xb6	; 0xb6 <setBoardCommon>
		for (int j=0; j<16; j++) {
 1c2:	c0 e0       	ldi	r28, 0x00	; 0
 1c4:	d0 e0       	ldi	r29, 0x00	; 0
			if (board[i][j] == '.')			continue;
 1c6:	87 01       	movw	r16, r14
 1c8:	02 95       	swap	r16
 1ca:	12 95       	swap	r17
 1cc:	10 7f       	andi	r17, 0xF0	; 240
 1ce:	10 27       	eor	r17, r16
 1d0:	00 7f       	andi	r16, 0xF0	; 240
 1d2:	10 27       	eor	r17, r16
 1d4:	0c 58       	subi	r16, 0x8C	; 140
 1d6:	1e 4f       	sbci	r17, 0xFE	; 254
 1d8:	f8 01       	movw	r30, r16
 1da:	ec 0f       	add	r30, r28
 1dc:	fd 1f       	adc	r31, r29
 1de:	80 81       	ld	r24, Z
 1e0:	8e 32       	cpi	r24, 0x2E	; 46
 1e2:	09 f4       	brne	.+2      	; 0x1e6 <displayBoard+0x48>
 1e4:	4b c0       	rjmp	.+150    	; 0x27c <displayBoard+0xde>
			else if (board[i][j] == '#') {
 1e6:	f8 01       	movw	r30, r16
 1e8:	ec 0f       	add	r30, r28
 1ea:	fd 1f       	adc	r31, r29
 1ec:	80 81       	ld	r24, Z
 1ee:	83 32       	cpi	r24, 0x23	; 35
 1f0:	21 f4       	brne	.+8      	; 0x1fa <displayBoard+0x5c>
				 setBoardRed(j);
 1f2:	8c 2f       	mov	r24, r28
 1f4:	0e 94 63 00 	call	0xc6	; 0xc6 <setBoardRed>
 1f8:	3b c0       	rjmp	.+118    	; 0x270 <displayBoard+0xd2>
			}
			else if (board[i][j] == '1') {
 1fa:	f8 01       	movw	r30, r16
 1fc:	ec 0f       	add	r30, r28
 1fe:	fd 1f       	adc	r31, r29
 200:	80 81       	ld	r24, Z
 202:	81 33       	cpi	r24, 0x31	; 49
 204:	21 f4       	brne	.+8      	; 0x20e <displayBoard+0x70>
				setBoardGreen(j);
 206:	8c 2f       	mov	r24, r28
 208:	0e 94 6c 00 	call	0xd8	; 0xd8 <setBoardGreen>
 20c:	31 c0       	rjmp	.+98     	; 0x270 <displayBoard+0xd2>
			}
			else if (board[i][j] == 'P') {
 20e:	f8 01       	movw	r30, r16
 210:	ec 0f       	add	r30, r28
 212:	fd 1f       	adc	r31, r29
 214:	80 81       	ld	r24, Z
 216:	80 35       	cpi	r24, 0x50	; 80
 218:	39 f4       	brne	.+14     	; 0x228 <displayBoard+0x8a>
				setBoardGreen(j);
 21a:	8c 2f       	mov	r24, r28
 21c:	0e 94 6c 00 	call	0xd8	; 0xd8 <setBoardGreen>
				setBoardRed(j);
 220:	8c 2f       	mov	r24, r28
 222:	0e 94 63 00 	call	0xc6	; 0xc6 <setBoardRed>
 226:	24 c0       	rjmp	.+72     	; 0x270 <displayBoard+0xd2>
			}
			else if (board[i][j] == 'F') {
 228:	f8 01       	movw	r30, r16
 22a:	ec 0f       	add	r30, r28
 22c:	fd 1f       	adc	r31, r29
 22e:	80 81       	ld	r24, Z
 230:	86 34       	cpi	r24, 0x46	; 70
 232:	f1 f4       	brne	.+60     	; 0x270 <displayBoard+0xd2>
				foodBlinkState = (foodBlinkState+1)%BLINK_RANGE;
 234:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <foodBlinkState>
 238:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <foodBlinkState+0x1>
 23c:	01 96       	adiw	r24, 0x01	; 1
 23e:	8f 77       	andi	r24, 0x7F	; 127
 240:	90 78       	andi	r25, 0x80	; 128
 242:	99 23       	and	r25, r25
 244:	24 f4       	brge	.+8      	; 0x24e <displayBoard+0xb0>
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	80 68       	ori	r24, 0x80	; 128
 24a:	9f 6f       	ori	r25, 0xFF	; 255
 24c:	01 96       	adiw	r24, 0x01	; 1
 24e:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <foodBlinkState+0x1>
 252:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <foodBlinkState>
				if (foodBlinkState<BLINK_RANGE/2)		continue;
 256:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <foodBlinkState>
 25a:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <foodBlinkState+0x1>
 25e:	80 34       	cpi	r24, 0x40	; 64
 260:	91 05       	cpc	r25, r1
 262:	64 f0       	brlt	.+24     	; 0x27c <displayBoard+0xde>
				setBoardGreen(j);
 264:	8c 2f       	mov	r24, r28
 266:	0e 94 6c 00 	call	0xd8	; 0xd8 <setBoardGreen>
				setBoardRed(j);
 26a:	8c 2f       	mov	r24, r28
 26c:	0e 94 63 00 	call	0xc6	; 0xc6 <setBoardRed>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 270:	82 e4       	ldi	r24, 0x42	; 66
 272:	8a 95       	dec	r24
 274:	f1 f7       	brne	.-4      	; 0x272 <displayBoard+0xd4>
 276:	00 c0       	rjmp	.+0      	; 0x278 <displayBoard+0xda>
				
			}
			_delay_us(RENDER_DELAY_US);
			reset();
 278:	0e 94 49 00 	call	0x92	; 0x92 <reset>
	if (gameOver) {
		return ;
	}
	for (int i=0; i<16; i++) {
		setBoardCommon(i);
		for (int j=0; j<16; j++) {
 27c:	21 96       	adiw	r28, 0x01	; 1
 27e:	c0 31       	cpi	r28, 0x10	; 16
 280:	d1 05       	cpc	r29, r1
 282:	09 f0       	breq	.+2      	; 0x286 <displayBoard+0xe8>
 284:	a9 cf       	rjmp	.-174    	; 0x1d8 <displayBoard+0x3a>

void displayBoard() {
	if (gameOver) {
		return ;
	}
	for (int i=0; i<16; i++) {
 286:	8f ef       	ldi	r24, 0xFF	; 255
 288:	e8 1a       	sub	r14, r24
 28a:	f8 0a       	sbc	r15, r24
 28c:	80 e1       	ldi	r24, 0x10	; 16
 28e:	e8 16       	cp	r14, r24
 290:	f1 04       	cpc	r15, r1
 292:	09 f0       	breq	.+2      	; 0x296 <displayBoard+0xf8>
 294:	93 cf       	rjmp	.-218    	; 0x1bc <displayBoard+0x1e>
			_delay_us(RENDER_DELAY_US);
			reset();
		}	
	}
	
}
 296:	df 91       	pop	r29
 298:	cf 91       	pop	r28
 29a:	1f 91       	pop	r17
 29c:	0f 91       	pop	r16
 29e:	ff 90       	pop	r15
 2a0:	ef 90       	pop	r14
 2a2:	08 95       	ret

000002a4 <clash>:

int clash(int px, int py, int gx, int gy) {
 2a4:	cf 92       	push	r12
 2a6:	df 92       	push	r13
 2a8:	ef 92       	push	r14
 2aa:	ff 92       	push	r15
 2ac:	0f 93       	push	r16
 2ae:	1f 93       	push	r17
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
 2b4:	ec 01       	movw	r28, r24
 2b6:	02 96       	adiw	r24, 0x02	; 2
 2b8:	7b 01       	movw	r14, r22
 2ba:	e2 e0       	ldi	r30, 0x02	; 2
 2bc:	ee 0e       	add	r14, r30
 2be:	f1 1c       	adc	r15, r1
 2c0:	8a 01       	movw	r16, r20
 2c2:	0e 5f       	subi	r16, 0xFE	; 254
 2c4:	1f 4f       	sbci	r17, 0xFF	; 255
	for (int i=0; i<2; i++)
		for (int j=0; j<2; j++)
			for (int k=0; k<2; k++)
				for (int l=0; l<2; l++)
					if (px+i==gx+k && py+j == gy+l)
 2c6:	69 01       	movw	r12, r18
 2c8:	ef ef       	ldi	r30, 0xFF	; 255
 2ca:	ce 1a       	sub	r12, r30
 2cc:	de 0a       	sbc	r13, r30
 2ce:	15 c0       	rjmp	.+42     	; 0x2fa <clash+0x56>
 2d0:	31 96       	adiw	r30, 0x01	; 1
}

int clash(int px, int py, int gx, int gy) {
	for (int i=0; i<2; i++)
		for (int j=0; j<2; j++)
			for (int k=0; k<2; k++)
 2d2:	e0 17       	cp	r30, r16
 2d4:	f1 07       	cpc	r31, r17
 2d6:	39 f0       	breq	.+14     	; 0x2e6 <clash+0x42>
				for (int l=0; l<2; l++)
					if (px+i==gx+k && py+j == gy+l)
 2d8:	ec 17       	cp	r30, r28
 2da:	fd 07       	cpc	r31, r29
 2dc:	c9 f7       	brne	.-14     	; 0x2d0 <clash+0x2c>
 2de:	2a 17       	cp	r18, r26
 2e0:	3b 07       	cpc	r19, r27
 2e2:	b1 f4       	brne	.+44     	; 0x310 <clash+0x6c>
 2e4:	0c c0       	rjmp	.+24     	; 0x2fe <clash+0x5a>
 2e6:	11 96       	adiw	r26, 0x01	; 1
	
}

int clash(int px, int py, int gx, int gy) {
	for (int i=0; i<2; i++)
		for (int j=0; j<2; j++)
 2e8:	ea 16       	cp	r14, r26
 2ea:	fb 06       	cpc	r15, r27
 2ec:	11 f0       	breq	.+4      	; 0x2f2 <clash+0x4e>
 2ee:	fa 01       	movw	r30, r20
 2f0:	f3 cf       	rjmp	.-26     	; 0x2d8 <clash+0x34>
 2f2:	21 96       	adiw	r28, 0x01	; 1
	}
	
}

int clash(int px, int py, int gx, int gy) {
	for (int i=0; i<2; i++)
 2f4:	8c 17       	cp	r24, r28
 2f6:	9d 07       	cpc	r25, r29
 2f8:	29 f0       	breq	.+10     	; 0x304 <clash+0x60>
 2fa:	db 01       	movw	r26, r22
 2fc:	f8 cf       	rjmp	.-16     	; 0x2ee <clash+0x4a>
		for (int j=0; j<2; j++)
			for (int k=0; k<2; k++)
				for (int l=0; l<2; l++)
					if (px+i==gx+k && py+j == gy+l)
						return 1;
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	0a c0       	rjmp	.+20     	; 0x318 <clash+0x74>
	return 0;
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	07 c0       	rjmp	.+14     	; 0x318 <clash+0x74>
	for (int i=0; i<2; i++)
		for (int j=0; j<2; j++)
			for (int k=0; k<2; k++)
				for (int l=0; l<2; l++)
					if (px+i==gx+k && py+j == gy+l)
						return 1;
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	04 c0       	rjmp	.+8      	; 0x318 <clash+0x74>
int clash(int px, int py, int gx, int gy) {
	for (int i=0; i<2; i++)
		for (int j=0; j<2; j++)
			for (int k=0; k<2; k++)
				for (int l=0; l<2; l++)
					if (px+i==gx+k && py+j == gy+l)
 310:	ac 15       	cp	r26, r12
 312:	bd 05       	cpc	r27, r13
 314:	e9 f6       	brne	.-70     	; 0x2d0 <clash+0x2c>
 316:	f9 cf       	rjmp	.-14     	; 0x30a <clash+0x66>
						return 1;
	return 0;
}
 318:	df 91       	pop	r29
 31a:	cf 91       	pop	r28
 31c:	1f 91       	pop	r17
 31e:	0f 91       	pop	r16
 320:	ff 90       	pop	r15
 322:	ef 90       	pop	r14
 324:	df 90       	pop	r13
 326:	cf 90       	pop	r12
 328:	08 95       	ret

0000032a <movePacman>:

void movePacman(int dir) {
 32a:	cf 92       	push	r12
 32c:	df 92       	push	r13
 32e:	ef 92       	push	r14
 330:	ff 92       	push	r15
 332:	0f 93       	push	r16
 334:	1f 93       	push	r17
 336:	cf 93       	push	r28
 338:	df 93       	push	r29
	int nx = px + dx[dir];
 33a:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <px>
 33e:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <px+0x1>
 342:	88 0f       	add	r24, r24
 344:	99 1f       	adc	r25, r25
 346:	fc 01       	movw	r30, r24
 348:	e4 59       	subi	r30, 0x94	; 148
 34a:	fe 4f       	sbci	r31, 0xFE	; 254
 34c:	c0 81       	ld	r28, Z
 34e:	d1 81       	ldd	r29, Z+1	; 0x01
 350:	ca 0f       	add	r28, r26
 352:	db 1f       	adc	r29, r27
	int ny = py + dy[dir];
 354:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__data_start>
 358:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__data_start+0x1>
 35c:	fc 01       	movw	r30, r24
 35e:	ec 59       	subi	r30, 0x9C	; 156
 360:	fe 4f       	sbci	r31, 0xFE	; 254
 362:	c0 80       	ld	r12, Z
 364:	d1 80       	ldd	r13, Z+1	; 0x01
 366:	c6 0e       	add	r12, r22
 368:	d7 1e       	adc	r13, r23
	if (background[nx][ny] == '#' || background[nx+1][ny] == '#' || background[nx][ny+1] == '#' || background[nx+1][ny+1] == '#')		return;
 36a:	fe 01       	movw	r30, r28
 36c:	e2 95       	swap	r30
 36e:	f2 95       	swap	r31
 370:	f0 7f       	andi	r31, 0xF0	; 240
 372:	fe 27       	eor	r31, r30
 374:	e0 7f       	andi	r30, 0xF0	; 240
 376:	fe 27       	eor	r31, r30
 378:	ec 59       	subi	r30, 0x9C	; 156
 37a:	ff 4f       	sbci	r31, 0xFF	; 255
 37c:	ec 0d       	add	r30, r12
 37e:	fd 1d       	adc	r31, r13
 380:	80 81       	ld	r24, Z
 382:	83 32       	cpi	r24, 0x23	; 35
 384:	09 f4       	brne	.+2      	; 0x388 <movePacman+0x5e>
 386:	ec c0       	rjmp	.+472    	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
 388:	8e 01       	movw	r16, r28
 38a:	0f 5f       	subi	r16, 0xFF	; 255
 38c:	1f 4f       	sbci	r17, 0xFF	; 255
 38e:	f8 01       	movw	r30, r16
 390:	e2 95       	swap	r30
 392:	f2 95       	swap	r31
 394:	f0 7f       	andi	r31, 0xF0	; 240
 396:	fe 27       	eor	r31, r30
 398:	e0 7f       	andi	r30, 0xF0	; 240
 39a:	fe 27       	eor	r31, r30
 39c:	ec 59       	subi	r30, 0x9C	; 156
 39e:	ff 4f       	sbci	r31, 0xFF	; 255
 3a0:	ec 0d       	add	r30, r12
 3a2:	fd 1d       	adc	r31, r13
 3a4:	80 81       	ld	r24, Z
 3a6:	83 32       	cpi	r24, 0x23	; 35
 3a8:	09 f4       	brne	.+2      	; 0x3ac <movePacman+0x82>
 3aa:	da c0       	rjmp	.+436    	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
 3ac:	76 01       	movw	r14, r12
 3ae:	8f ef       	ldi	r24, 0xFF	; 255
 3b0:	e8 1a       	sub	r14, r24
 3b2:	f8 0a       	sbc	r15, r24
 3b4:	fe 01       	movw	r30, r28
 3b6:	e2 95       	swap	r30
 3b8:	f2 95       	swap	r31
 3ba:	f0 7f       	andi	r31, 0xF0	; 240
 3bc:	fe 27       	eor	r31, r30
 3be:	e0 7f       	andi	r30, 0xF0	; 240
 3c0:	fe 27       	eor	r31, r30
 3c2:	ec 59       	subi	r30, 0x9C	; 156
 3c4:	ff 4f       	sbci	r31, 0xFF	; 255
 3c6:	ee 0d       	add	r30, r14
 3c8:	ff 1d       	adc	r31, r15
 3ca:	80 81       	ld	r24, Z
 3cc:	83 32       	cpi	r24, 0x23	; 35
 3ce:	09 f4       	brne	.+2      	; 0x3d2 <movePacman+0xa8>
 3d0:	c7 c0       	rjmp	.+398    	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
 3d2:	f8 01       	movw	r30, r16
 3d4:	e2 95       	swap	r30
 3d6:	f2 95       	swap	r31
 3d8:	f0 7f       	andi	r31, 0xF0	; 240
 3da:	fe 27       	eor	r31, r30
 3dc:	e0 7f       	andi	r30, 0xF0	; 240
 3de:	fe 27       	eor	r31, r30
 3e0:	ec 59       	subi	r30, 0x9C	; 156
 3e2:	ff 4f       	sbci	r31, 0xFF	; 255
 3e4:	ee 0d       	add	r30, r14
 3e6:	ff 1d       	adc	r31, r15
 3e8:	80 81       	ld	r24, Z
 3ea:	83 32       	cpi	r24, 0x23	; 35
 3ec:	09 f4       	brne	.+2      	; 0x3f0 <movePacman+0xc6>
 3ee:	b8 c0       	rjmp	.+368    	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
	
	for (int i=0; i<GHOST_COUNT; i++) {
		int ggx = gx[i];
		int ggy = gy[i];
		if (clash(px, py, ggx, ggy)) {
 3f0:	25 e0       	ldi	r18, 0x05	; 5
 3f2:	30 e0       	ldi	r19, 0x00	; 0
 3f4:	4d e0       	ldi	r20, 0x0D	; 13
 3f6:	50 e0       	ldi	r21, 0x00	; 0
 3f8:	cd 01       	movw	r24, r26
 3fa:	0e 94 52 01 	call	0x2a4	; 0x2a4 <clash>
 3fe:	89 2b       	or	r24, r25
 400:	39 f0       	breq	.+14     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
			gameOver = 1;
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <gameOver+0x1>
 40a:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <gameOver>
			return;
 40e:	a8 c0       	rjmp	.+336    	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
		}
	}
	
	px = nx;
 410:	d0 93 63 00 	sts	0x0063, r29	; 0x800063 <px+0x1>
 414:	c0 93 62 00 	sts	0x0062, r28	; 0x800062 <px>
	py = ny;
 418:	d0 92 61 00 	sts	0x0061, r13	; 0x800061 <__data_start+0x1>
 41c:	c0 92 60 00 	sts	0x0060, r12	; 0x800060 <__data_start>
	
	if (background[nx][ny] == 'F' || background[nx][ny+1] == 'F' ||
 420:	fe 01       	movw	r30, r28
 422:	e2 95       	swap	r30
 424:	f2 95       	swap	r31
 426:	f0 7f       	andi	r31, 0xF0	; 240
 428:	fe 27       	eor	r31, r30
 42a:	e0 7f       	andi	r30, 0xF0	; 240
 42c:	fe 27       	eor	r31, r30
 42e:	ec 59       	subi	r30, 0x9C	; 156
 430:	ff 4f       	sbci	r31, 0xFF	; 255
 432:	ec 0d       	add	r30, r12
 434:	fd 1d       	adc	r31, r13
 436:	80 81       	ld	r24, Z
 438:	86 34       	cpi	r24, 0x46	; 70
 43a:	51 f1       	breq	.+84     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 43c:	fe 01       	movw	r30, r28
 43e:	e2 95       	swap	r30
 440:	f2 95       	swap	r31
 442:	f0 7f       	andi	r31, 0xF0	; 240
 444:	fe 27       	eor	r31, r30
 446:	e0 7f       	andi	r30, 0xF0	; 240
 448:	fe 27       	eor	r31, r30
 44a:	ec 59       	subi	r30, 0x9C	; 156
 44c:	ff 4f       	sbci	r31, 0xFF	; 255
 44e:	ee 0d       	add	r30, r14
 450:	ff 1d       	adc	r31, r15
 452:	80 81       	ld	r24, Z
 454:	86 34       	cpi	r24, 0x46	; 70
 456:	e1 f0       	breq	.+56     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
	background[nx+1][ny] == 'F' || background[nx+1][ny+1] == 'F') {
 458:	f8 01       	movw	r30, r16
 45a:	e2 95       	swap	r30
 45c:	f2 95       	swap	r31
 45e:	f0 7f       	andi	r31, 0xF0	; 240
 460:	fe 27       	eor	r31, r30
 462:	e0 7f       	andi	r30, 0xF0	; 240
 464:	fe 27       	eor	r31, r30
 466:	ec 59       	subi	r30, 0x9C	; 156
 468:	ff 4f       	sbci	r31, 0xFF	; 255
 46a:	ec 0d       	add	r30, r12
 46c:	fd 1d       	adc	r31, r13
 46e:	80 81       	ld	r24, Z
	}
	
	px = nx;
	py = ny;
	
	if (background[nx][ny] == 'F' || background[nx][ny+1] == 'F' ||
 470:	86 34       	cpi	r24, 0x46	; 70
 472:	71 f0       	breq	.+28     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
	background[nx+1][ny] == 'F' || background[nx+1][ny+1] == 'F') {
 474:	f8 01       	movw	r30, r16
 476:	e2 95       	swap	r30
 478:	f2 95       	swap	r31
 47a:	f0 7f       	andi	r31, 0xF0	; 240
 47c:	fe 27       	eor	r31, r30
 47e:	e0 7f       	andi	r30, 0xF0	; 240
 480:	fe 27       	eor	r31, r30
 482:	ec 59       	subi	r30, 0x9C	; 156
 484:	ff 4f       	sbci	r31, 0xFF	; 255
 486:	ee 0d       	add	r30, r14
 488:	ff 1d       	adc	r31, r15
 48a:	80 81       	ld	r24, Z
 48c:	86 34       	cpi	r24, 0x46	; 70
 48e:	31 f4       	brne	.+12     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
		buzzerRemainingTime = BUZZER_DURATION;
 490:	85 e0       	ldi	r24, 0x05	; 5
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	90 93 79 02 	sts	0x0279, r25	; 0x800279 <buzzerRemainingTime+0x1>
 498:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <buzzerRemainingTime>
	}
	
	if (background[nx][ny] == 'F')		background[nx][ny] = '.';
 49c:	fe 01       	movw	r30, r28
 49e:	e2 95       	swap	r30
 4a0:	f2 95       	swap	r31
 4a2:	f0 7f       	andi	r31, 0xF0	; 240
 4a4:	fe 27       	eor	r31, r30
 4a6:	e0 7f       	andi	r30, 0xF0	; 240
 4a8:	fe 27       	eor	r31, r30
 4aa:	ec 59       	subi	r30, 0x9C	; 156
 4ac:	ff 4f       	sbci	r31, 0xFF	; 255
 4ae:	ec 0d       	add	r30, r12
 4b0:	fd 1d       	adc	r31, r13
 4b2:	80 81       	ld	r24, Z
 4b4:	86 34       	cpi	r24, 0x46	; 70
 4b6:	69 f4       	brne	.+26     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 4b8:	fe 01       	movw	r30, r28
 4ba:	e2 95       	swap	r30
 4bc:	f2 95       	swap	r31
 4be:	f0 7f       	andi	r31, 0xF0	; 240
 4c0:	fe 27       	eor	r31, r30
 4c2:	e0 7f       	andi	r30, 0xF0	; 240
 4c4:	fe 27       	eor	r31, r30
 4c6:	ec 59       	subi	r30, 0x9C	; 156
 4c8:	ff 4f       	sbci	r31, 0xFF	; 255
 4ca:	ec 0d       	add	r30, r12
 4cc:	fd 1d       	adc	r31, r13
 4ce:	8e e2       	ldi	r24, 0x2E	; 46
 4d0:	80 83       	st	Z, r24
	if (background[nx+1][ny] == 'F')	background[nx+1][ny] = '.';
 4d2:	f8 01       	movw	r30, r16
 4d4:	e2 95       	swap	r30
 4d6:	f2 95       	swap	r31
 4d8:	f0 7f       	andi	r31, 0xF0	; 240
 4da:	fe 27       	eor	r31, r30
 4dc:	e0 7f       	andi	r30, 0xF0	; 240
 4de:	fe 27       	eor	r31, r30
 4e0:	ec 59       	subi	r30, 0x9C	; 156
 4e2:	ff 4f       	sbci	r31, 0xFF	; 255
 4e4:	ec 0d       	add	r30, r12
 4e6:	fd 1d       	adc	r31, r13
 4e8:	80 81       	ld	r24, Z
 4ea:	86 34       	cpi	r24, 0x46	; 70
 4ec:	71 f4       	brne	.+28     	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
 4ee:	c8 01       	movw	r24, r16
 4f0:	82 95       	swap	r24
 4f2:	92 95       	swap	r25
 4f4:	90 7f       	andi	r25, 0xF0	; 240
 4f6:	98 27       	eor	r25, r24
 4f8:	80 7f       	andi	r24, 0xF0	; 240
 4fa:	98 27       	eor	r25, r24
 4fc:	8c 59       	subi	r24, 0x9C	; 156
 4fe:	9f 4f       	sbci	r25, 0xFF	; 255
 500:	fc 01       	movw	r30, r24
 502:	ec 0d       	add	r30, r12
 504:	fd 1d       	adc	r31, r13
 506:	8e e2       	ldi	r24, 0x2E	; 46
 508:	80 83       	st	Z, r24
	if (background[nx][ny+1] == 'F')	background[nx][ny+1] = '.';
 50a:	fe 01       	movw	r30, r28
 50c:	e2 95       	swap	r30
 50e:	f2 95       	swap	r31
 510:	f0 7f       	andi	r31, 0xF0	; 240
 512:	fe 27       	eor	r31, r30
 514:	e0 7f       	andi	r30, 0xF0	; 240
 516:	fe 27       	eor	r31, r30
 518:	ec 59       	subi	r30, 0x9C	; 156
 51a:	ff 4f       	sbci	r31, 0xFF	; 255
 51c:	ee 0d       	add	r30, r14
 51e:	ff 1d       	adc	r31, r15
 520:	80 81       	ld	r24, Z
 522:	86 34       	cpi	r24, 0x46	; 70
 524:	11 f4       	brne	.+4      	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
 526:	8e e2       	ldi	r24, 0x2E	; 46
 528:	80 83       	st	Z, r24
	if (background[nx+1][ny+1] == 'F')  background[nx+1][ny+1] = '.';
 52a:	f8 01       	movw	r30, r16
 52c:	e2 95       	swap	r30
 52e:	f2 95       	swap	r31
 530:	f0 7f       	andi	r31, 0xF0	; 240
 532:	fe 27       	eor	r31, r30
 534:	e0 7f       	andi	r30, 0xF0	; 240
 536:	fe 27       	eor	r31, r30
 538:	ec 59       	subi	r30, 0x9C	; 156
 53a:	ff 4f       	sbci	r31, 0xFF	; 255
 53c:	ee 0d       	add	r30, r14
 53e:	ff 1d       	adc	r31, r15
 540:	80 81       	ld	r24, Z
 542:	86 34       	cpi	r24, 0x46	; 70
 544:	69 f4       	brne	.+26     	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
 546:	02 95       	swap	r16
 548:	12 95       	swap	r17
 54a:	10 7f       	andi	r17, 0xF0	; 240
 54c:	10 27       	eor	r17, r16
 54e:	00 7f       	andi	r16, 0xF0	; 240
 550:	10 27       	eor	r17, r16
 552:	0c 59       	subi	r16, 0x9C	; 156
 554:	1f 4f       	sbci	r17, 0xFF	; 255
 556:	f8 01       	movw	r30, r16
 558:	ee 0d       	add	r30, r14
 55a:	ff 1d       	adc	r31, r15
 55c:	8e e2       	ldi	r24, 0x2E	; 46
 55e:	80 83       	st	Z, r24
}
 560:	df 91       	pop	r29
 562:	cf 91       	pop	r28
 564:	1f 91       	pop	r17
 566:	0f 91       	pop	r16
 568:	ff 90       	pop	r15
 56a:	ef 90       	pop	r14
 56c:	df 90       	pop	r13
 56e:	cf 90       	pop	r12
 570:	08 95       	ret

00000572 <buzz>:

void buzz() {
	if (buzzerRemainingTime > 0)		PORTB |= 0b00000100;
 572:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <buzzerRemainingTime>
 576:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <buzzerRemainingTime+0x1>
 57a:	18 16       	cp	r1, r24
 57c:	19 06       	cpc	r1, r25
 57e:	14 f4       	brge	.+4      	; 0x584 <buzz+0x12>
 580:	c2 9a       	sbi	0x18, 2	; 24
 582:	01 c0       	rjmp	.+2      	; 0x586 <buzz+0x14>
	else								PORTB &= 0b11111011;
 584:	c2 98       	cbi	0x18, 2	; 24
	if (buzzerRemainingTime) buzzerRemainingTime--;
 586:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <buzzerRemainingTime>
 58a:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <buzzerRemainingTime+0x1>
 58e:	89 2b       	or	r24, r25
 590:	49 f0       	breq	.+18     	; 0x5a4 <buzz+0x32>
 592:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <buzzerRemainingTime>
 596:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <buzzerRemainingTime+0x1>
 59a:	01 97       	sbiw	r24, 0x01	; 1
 59c:	90 93 79 02 	sts	0x0279, r25	; 0x800279 <buzzerRemainingTime+0x1>
 5a0:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <buzzerRemainingTime>
 5a4:	08 95       	ret

000005a6 <main>:
}

int main(void)
{
	MCUCSR |= 1 << JTD;
 5a6:	84 b7       	in	r24, 0x34	; 52
 5a8:	80 68       	ori	r24, 0x80	; 128
 5aa:	84 bf       	out	0x34, r24	; 52
	MCUCSR |= 1 << JTD;
 5ac:	84 b7       	in	r24, 0x34	; 52
 5ae:	80 68       	ori	r24, 0x80	; 128
 5b0:	84 bf       	out	0x34, r24	; 52

	ledMatrixInit();
 5b2:	0e 94 4d 00 	call	0x9a	; 0x9a <ledMatrixInit>
	controlInit();
 5b6:	0e 94 55 00 	call	0xaa	; 0xaa <controlInit>
	buzzerInit();
 5ba:	0e 94 59 00 	call	0xb2	; 0xb2 <buzzerInit>

    /* Replace with your application code */
	
	while(1) {
		int direction = PINB & 0x03;
 5be:	86 b3       	in	r24, 0x16	; 22
		movePacman(direction);
 5c0:	83 70       	andi	r24, 0x03	; 3
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	0e 94 95 01 	call	0x32a	; 0x32a <movePacman>
		makeBoard();
 5c8:	0e 94 78 00 	call	0xf0	; 0xf0 <makeBoard>
 5cc:	cc e0       	ldi	r28, 0x0C	; 12
 5ce:	d0 e0       	ldi	r29, 0x00	; 0
		for (int i=0; i<FRAME_RATE; i++) {
			displayBoard();
 5d0:	0e 94 cf 00 	call	0x19e	; 0x19e <displayBoard>
			buzz();
 5d4:	0e 94 b9 02 	call	0x572	; 0x572 <buzz>
 5d8:	21 97       	sbiw	r28, 0x01	; 1
	
	while(1) {
		int direction = PINB & 0x03;
		movePacman(direction);
		makeBoard();
		for (int i=0; i<FRAME_RATE; i++) {
 5da:	d1 f7       	brne	.-12     	; 0x5d0 <main+0x2a>
 5dc:	f0 cf       	rjmp	.-32     	; 0x5be <main+0x18>

000005de <_exit>:
 5de:	f8 94       	cli

000005e0 <__stop_program>:
 5e0:	ff cf       	rjmp	.-2      	; 0x5e0 <__stop_program>
