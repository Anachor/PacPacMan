
RenderDisplay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bd8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000041c  00800060  00000bd8  00000c6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000028c  0080047c  0080047c  00001088  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001088  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000010b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000010f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000113e  00000000  00000000  000011ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d2  00000000  00000000  000022ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000917  00000000  00000000  00002abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000294  00000000  00000000  000033d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e3  00000000  00000000  00003668  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d82  00000000  00000000  00003b4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  000048cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	14 e0       	ldi	r17, 0x04	; 4
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ed       	ldi	r30, 0xD8	; 216
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	27 e0       	ldi	r18, 0x07	; 7
  78:	ac e7       	ldi	r26, 0x7C	; 124
  7a:	b4 e0       	ldi	r27, 0x04	; 4
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 30       	cpi	r26, 0x08	; 8
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <main>
  8a:	0c 94 ea 05 	jmp	0xbd4	; 0xbd4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ledMatrixInit>:
	return ans;
}

int ghostStrategy(int id) {
	return ghostStrategyShortestPath(id);
}
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	8a bb       	out	0x1a, r24	; 26
  96:	8f ec       	ldi	r24, 0xCF	; 207
  98:	84 bb       	out	0x14, r24	; 20
  9a:	85 b3       	in	r24, 0x15	; 21
  9c:	80 6c       	ori	r24, 0xC0	; 192
  9e:	85 bb       	out	0x15, r24	; 21
  a0:	08 95       	ret

000000a2 <controlInit>:
  a2:	87 b3       	in	r24, 0x17	; 23
  a4:	84 7f       	andi	r24, 0xF4	; 244
  a6:	87 bb       	out	0x17, r24	; 23
  a8:	08 95       	ret

000000aa <buzzerInit>:
  aa:	ba 9a       	sbi	0x17, 2	; 23
  ac:	08 95       	ret

000000ae <setBoardCommon>:
  ae:	95 b3       	in	r25, 0x15	; 21
  b0:	90 7f       	andi	r25, 0xF0	; 240
  b2:	95 bb       	out	0x15, r25	; 21
  b4:	95 b3       	in	r25, 0x15	; 21
  b6:	8f 70       	andi	r24, 0x0F	; 15
  b8:	98 2b       	or	r25, r24
  ba:	95 bb       	out	0x15, r25	; 21
  bc:	08 95       	ret

000000be <setBoardRed>:
  be:	ae 98       	cbi	0x15, 6	; 21
  c0:	9b b3       	in	r25, 0x1b	; 27
  c2:	90 7f       	andi	r25, 0xF0	; 240
  c4:	9b bb       	out	0x1b, r25	; 27
  c6:	9b b3       	in	r25, 0x1b	; 27
  c8:	8f 70       	andi	r24, 0x0F	; 15
  ca:	98 2b       	or	r25, r24
  cc:	9b bb       	out	0x1b, r25	; 27
  ce:	08 95       	ret

000000d0 <setBoardGreen>:
  d0:	af 98       	cbi	0x15, 7	; 21
  d2:	9b b3       	in	r25, 0x1b	; 27
  d4:	9f 70       	andi	r25, 0x0F	; 15
  d6:	9b bb       	out	0x1b, r25	; 27
  d8:	2b b3       	in	r18, 0x1b	; 27
  da:	30 e1       	ldi	r19, 0x10	; 16
  dc:	83 9f       	mul	r24, r19
  de:	c0 01       	movw	r24, r0
  e0:	11 24       	eor	r1, r1
  e2:	82 2b       	or	r24, r18
  e4:	8b bb       	out	0x1b, r24	; 27
  e6:	08 95       	ret

000000e8 <reset>:
  e8:	85 b3       	in	r24, 0x15	; 21
  ea:	80 6c       	ori	r24, 0xC0	; 192
  ec:	85 bb       	out	0x15, r24	; 21
  ee:	08 95       	ret

000000f0 <makeBoard>:
  f0:	a0 e0       	ldi	r26, 0x00	; 0
  f2:	b0 e0       	ldi	r27, 0x00	; 0
  f4:	10 c0       	rjmp	.+32     	; 0x116 <makeBoard+0x26>
  f6:	fb 01       	movw	r30, r22
  f8:	e8 0f       	add	r30, r24
  fa:	f9 1f       	adc	r31, r25
  fc:	20 81       	ld	r18, Z
  fe:	fa 01       	movw	r30, r20
 100:	e8 0f       	add	r30, r24
 102:	f9 1f       	adc	r31, r25
 104:	20 83       	st	Z, r18
 106:	01 96       	adiw	r24, 0x01	; 1
 108:	80 31       	cpi	r24, 0x10	; 16
 10a:	91 05       	cpc	r25, r1
 10c:	a1 f7       	brne	.-24     	; 0xf6 <makeBoard+0x6>
 10e:	11 96       	adiw	r26, 0x01	; 1
 110:	a0 31       	cpi	r26, 0x10	; 16
 112:	b1 05       	cpc	r27, r1
 114:	79 f0       	breq	.+30     	; 0x134 <makeBoard+0x44>
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	ad 01       	movw	r20, r26
 11c:	42 95       	swap	r20
 11e:	52 95       	swap	r21
 120:	50 7f       	andi	r21, 0xF0	; 240
 122:	54 27       	eor	r21, r20
 124:	40 7f       	andi	r20, 0xF0	; 240
 126:	54 27       	eor	r21, r20
 128:	ba 01       	movw	r22, r20
 12a:	64 59       	subi	r22, 0x94	; 148
 12c:	7f 4f       	sbci	r23, 0xFF	; 255
 12e:	44 58       	subi	r20, 0x84	; 132
 130:	5b 4f       	sbci	r21, 0xFB	; 251
 132:	e1 cf       	rjmp	.-62     	; 0xf6 <makeBoard+0x6>
 134:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <px>
 138:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <px+0x1>
 13c:	40 91 68 00 	lds	r20, 0x0068	; 0x800068 <py>
 140:	50 91 69 00 	lds	r21, 0x0069	; 0x800069 <py+0x1>
 144:	fa 01       	movw	r30, r20
 146:	31 96       	adiw	r30, 0x01	; 1
 148:	9c 01       	movw	r18, r24
 14a:	22 95       	swap	r18
 14c:	32 95       	swap	r19
 14e:	30 7f       	andi	r19, 0xF0	; 240
 150:	32 27       	eor	r19, r18
 152:	20 7f       	andi	r18, 0xF0	; 240
 154:	32 27       	eor	r19, r18
 156:	24 57       	subi	r18, 0x74	; 116
 158:	3b 4f       	sbci	r19, 0xFB	; 251
 15a:	d9 01       	movw	r26, r18
 15c:	ae 0f       	add	r26, r30
 15e:	bf 1f       	adc	r27, r31
 160:	60 e5       	ldi	r22, 0x50	; 80
 162:	6c 93       	st	X, r22
 164:	82 95       	swap	r24
 166:	92 95       	swap	r25
 168:	90 7f       	andi	r25, 0xF0	; 240
 16a:	98 27       	eor	r25, r24
 16c:	80 7f       	andi	r24, 0xF0	; 240
 16e:	98 27       	eor	r25, r24
 170:	84 58       	subi	r24, 0x84	; 132
 172:	9b 4f       	sbci	r25, 0xFB	; 251
 174:	e8 0f       	add	r30, r24
 176:	f9 1f       	adc	r31, r25
 178:	60 83       	st	Z, r22
 17a:	f9 01       	movw	r30, r18
 17c:	e4 0f       	add	r30, r20
 17e:	f5 1f       	adc	r31, r21
 180:	60 83       	st	Z, r22
 182:	fc 01       	movw	r30, r24
 184:	e4 0f       	add	r30, r20
 186:	f5 1f       	adc	r31, r21
 188:	60 83       	st	Z, r22
 18a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <gx>
 18e:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <gx+0x1>
 192:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <__data_start>
 196:	50 91 61 00 	lds	r21, 0x0061	; 0x800061 <__data_start+0x1>
 19a:	fa 01       	movw	r30, r20
 19c:	31 96       	adiw	r30, 0x01	; 1
 19e:	9c 01       	movw	r18, r24
 1a0:	22 95       	swap	r18
 1a2:	32 95       	swap	r19
 1a4:	30 7f       	andi	r19, 0xF0	; 240
 1a6:	32 27       	eor	r19, r18
 1a8:	20 7f       	andi	r18, 0xF0	; 240
 1aa:	32 27       	eor	r19, r18
 1ac:	24 57       	subi	r18, 0x74	; 116
 1ae:	3b 4f       	sbci	r19, 0xFB	; 251
 1b0:	d9 01       	movw	r26, r18
 1b2:	ae 0f       	add	r26, r30
 1b4:	bf 1f       	adc	r27, r31
 1b6:	61 e3       	ldi	r22, 0x31	; 49
 1b8:	6c 93       	st	X, r22
 1ba:	82 95       	swap	r24
 1bc:	92 95       	swap	r25
 1be:	90 7f       	andi	r25, 0xF0	; 240
 1c0:	98 27       	eor	r25, r24
 1c2:	80 7f       	andi	r24, 0xF0	; 240
 1c4:	98 27       	eor	r25, r24
 1c6:	84 58       	subi	r24, 0x84	; 132
 1c8:	9b 4f       	sbci	r25, 0xFB	; 251
 1ca:	e8 0f       	add	r30, r24
 1cc:	f9 1f       	adc	r31, r25
 1ce:	60 83       	st	Z, r22
 1d0:	f9 01       	movw	r30, r18
 1d2:	e4 0f       	add	r30, r20
 1d4:	f5 1f       	adc	r31, r21
 1d6:	60 83       	st	Z, r22
 1d8:	fc 01       	movw	r30, r24
 1da:	e4 0f       	add	r30, r20
 1dc:	f5 1f       	adc	r31, r21
 1de:	60 83       	st	Z, r22
 1e0:	08 95       	ret

000001e2 <displayBoard>:
 1e2:	ef 92       	push	r14
 1e4:	ff 92       	push	r15
 1e6:	0f 93       	push	r16
 1e8:	1f 93       	push	r17
 1ea:	cf 93       	push	r28
 1ec:	df 93       	push	r29
 1ee:	e1 2c       	mov	r14, r1
 1f0:	f1 2c       	mov	r15, r1
 1f2:	8e 2d       	mov	r24, r14
 1f4:	0e 94 57 00 	call	0xae	; 0xae <setBoardCommon>
 1f8:	c0 e0       	ldi	r28, 0x00	; 0
 1fa:	d0 e0       	ldi	r29, 0x00	; 0
 1fc:	87 01       	movw	r16, r14
 1fe:	02 95       	swap	r16
 200:	12 95       	swap	r17
 202:	10 7f       	andi	r17, 0xF0	; 240
 204:	10 27       	eor	r17, r16
 206:	00 7f       	andi	r16, 0xF0	; 240
 208:	10 27       	eor	r17, r16
 20a:	04 58       	subi	r16, 0x84	; 132
 20c:	1b 4f       	sbci	r17, 0xFB	; 251
 20e:	f8 01       	movw	r30, r16
 210:	ec 0f       	add	r30, r28
 212:	fd 1f       	adc	r31, r29
 214:	80 81       	ld	r24, Z
 216:	8e 32       	cpi	r24, 0x2E	; 46
 218:	09 f4       	brne	.+2      	; 0x21c <displayBoard+0x3a>
 21a:	4b c0       	rjmp	.+150    	; 0x2b2 <displayBoard+0xd0>
 21c:	f8 01       	movw	r30, r16
 21e:	ec 0f       	add	r30, r28
 220:	fd 1f       	adc	r31, r29
 222:	80 81       	ld	r24, Z
 224:	83 32       	cpi	r24, 0x23	; 35
 226:	21 f4       	brne	.+8      	; 0x230 <displayBoard+0x4e>
 228:	8c 2f       	mov	r24, r28
 22a:	0e 94 5f 00 	call	0xbe	; 0xbe <setBoardRed>
 22e:	3b c0       	rjmp	.+118    	; 0x2a6 <displayBoard+0xc4>
 230:	f8 01       	movw	r30, r16
 232:	ec 0f       	add	r30, r28
 234:	fd 1f       	adc	r31, r29
 236:	80 81       	ld	r24, Z
 238:	81 33       	cpi	r24, 0x31	; 49
 23a:	21 f4       	brne	.+8      	; 0x244 <displayBoard+0x62>
 23c:	8c 2f       	mov	r24, r28
 23e:	0e 94 68 00 	call	0xd0	; 0xd0 <setBoardGreen>
 242:	31 c0       	rjmp	.+98     	; 0x2a6 <displayBoard+0xc4>
 244:	f8 01       	movw	r30, r16
 246:	ec 0f       	add	r30, r28
 248:	fd 1f       	adc	r31, r29
 24a:	80 81       	ld	r24, Z
 24c:	80 35       	cpi	r24, 0x50	; 80
 24e:	39 f4       	brne	.+14     	; 0x25e <displayBoard+0x7c>
 250:	8c 2f       	mov	r24, r28
 252:	0e 94 68 00 	call	0xd0	; 0xd0 <setBoardGreen>
 256:	8c 2f       	mov	r24, r28
 258:	0e 94 5f 00 	call	0xbe	; 0xbe <setBoardRed>
 25c:	24 c0       	rjmp	.+72     	; 0x2a6 <displayBoard+0xc4>
 25e:	f8 01       	movw	r30, r16
 260:	ec 0f       	add	r30, r28
 262:	fd 1f       	adc	r31, r29
 264:	80 81       	ld	r24, Z
 266:	86 34       	cpi	r24, 0x46	; 70
 268:	f1 f4       	brne	.+60     	; 0x2a6 <displayBoard+0xc4>
 26a:	80 91 7f 05 	lds	r24, 0x057F	; 0x80057f <foodBlinkState>
 26e:	90 91 80 05 	lds	r25, 0x0580	; 0x800580 <foodBlinkState+0x1>
 272:	01 96       	adiw	r24, 0x01	; 1
 274:	8f 77       	andi	r24, 0x7F	; 127
 276:	90 78       	andi	r25, 0x80	; 128
 278:	99 23       	and	r25, r25
 27a:	24 f4       	brge	.+8      	; 0x284 <displayBoard+0xa2>
 27c:	01 97       	sbiw	r24, 0x01	; 1
 27e:	80 68       	ori	r24, 0x80	; 128
 280:	9f 6f       	ori	r25, 0xFF	; 255
 282:	01 96       	adiw	r24, 0x01	; 1
 284:	90 93 80 05 	sts	0x0580, r25	; 0x800580 <foodBlinkState+0x1>
 288:	80 93 7f 05 	sts	0x057F, r24	; 0x80057f <foodBlinkState>
 28c:	80 91 7f 05 	lds	r24, 0x057F	; 0x80057f <foodBlinkState>
 290:	90 91 80 05 	lds	r25, 0x0580	; 0x800580 <foodBlinkState+0x1>
 294:	80 34       	cpi	r24, 0x40	; 64
 296:	91 05       	cpc	r25, r1
 298:	64 f0       	brlt	.+24     	; 0x2b2 <displayBoard+0xd0>
 29a:	8c 2f       	mov	r24, r28
 29c:	0e 94 68 00 	call	0xd0	; 0xd0 <setBoardGreen>
 2a0:	8c 2f       	mov	r24, r28
 2a2:	0e 94 5f 00 	call	0xbe	; 0xbe <setBoardRed>
 2a6:	82 e4       	ldi	r24, 0x42	; 66
 2a8:	8a 95       	dec	r24
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <displayBoard+0xc6>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <displayBoard+0xcc>
 2ae:	0e 94 74 00 	call	0xe8	; 0xe8 <reset>
 2b2:	21 96       	adiw	r28, 0x01	; 1
 2b4:	c0 31       	cpi	r28, 0x10	; 16
 2b6:	d1 05       	cpc	r29, r1
 2b8:	09 f0       	breq	.+2      	; 0x2bc <displayBoard+0xda>
 2ba:	a9 cf       	rjmp	.-174    	; 0x20e <displayBoard+0x2c>
 2bc:	8f ef       	ldi	r24, 0xFF	; 255
 2be:	e8 1a       	sub	r14, r24
 2c0:	f8 0a       	sbc	r15, r24
 2c2:	80 e1       	ldi	r24, 0x10	; 16
 2c4:	e8 16       	cp	r14, r24
 2c6:	f1 04       	cpc	r15, r1
 2c8:	09 f0       	breq	.+2      	; 0x2cc <displayBoard+0xea>
 2ca:	93 cf       	rjmp	.-218    	; 0x1f2 <displayBoard+0x10>
 2cc:	df 91       	pop	r29
 2ce:	cf 91       	pop	r28
 2d0:	1f 91       	pop	r17
 2d2:	0f 91       	pop	r16
 2d4:	ff 90       	pop	r15
 2d6:	ef 90       	pop	r14
 2d8:	08 95       	ret

000002da <clash>:
 2da:	cf 92       	push	r12
 2dc:	df 92       	push	r13
 2de:	ef 92       	push	r14
 2e0:	ff 92       	push	r15
 2e2:	0f 93       	push	r16
 2e4:	1f 93       	push	r17
 2e6:	cf 93       	push	r28
 2e8:	df 93       	push	r29
 2ea:	ec 01       	movw	r28, r24
 2ec:	02 96       	adiw	r24, 0x02	; 2
 2ee:	7b 01       	movw	r14, r22
 2f0:	e2 e0       	ldi	r30, 0x02	; 2
 2f2:	ee 0e       	add	r14, r30
 2f4:	f1 1c       	adc	r15, r1
 2f6:	8a 01       	movw	r16, r20
 2f8:	0e 5f       	subi	r16, 0xFE	; 254
 2fa:	1f 4f       	sbci	r17, 0xFF	; 255
 2fc:	69 01       	movw	r12, r18
 2fe:	ef ef       	ldi	r30, 0xFF	; 255
 300:	ce 1a       	sub	r12, r30
 302:	de 0a       	sbc	r13, r30
 304:	15 c0       	rjmp	.+42     	; 0x330 <clash+0x56>
 306:	31 96       	adiw	r30, 0x01	; 1
 308:	e0 17       	cp	r30, r16
 30a:	f1 07       	cpc	r31, r17
 30c:	39 f0       	breq	.+14     	; 0x31c <clash+0x42>
 30e:	ec 17       	cp	r30, r28
 310:	fd 07       	cpc	r31, r29
 312:	c9 f7       	brne	.-14     	; 0x306 <clash+0x2c>
 314:	2a 17       	cp	r18, r26
 316:	3b 07       	cpc	r19, r27
 318:	b1 f4       	brne	.+44     	; 0x346 <clash+0x6c>
 31a:	0c c0       	rjmp	.+24     	; 0x334 <clash+0x5a>
 31c:	11 96       	adiw	r26, 0x01	; 1
 31e:	ea 16       	cp	r14, r26
 320:	fb 06       	cpc	r15, r27
 322:	11 f0       	breq	.+4      	; 0x328 <clash+0x4e>
 324:	fa 01       	movw	r30, r20
 326:	f3 cf       	rjmp	.-26     	; 0x30e <clash+0x34>
 328:	21 96       	adiw	r28, 0x01	; 1
 32a:	8c 17       	cp	r24, r28
 32c:	9d 07       	cpc	r25, r29
 32e:	29 f0       	breq	.+10     	; 0x33a <clash+0x60>
 330:	db 01       	movw	r26, r22
 332:	f8 cf       	rjmp	.-16     	; 0x324 <clash+0x4a>
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	0a c0       	rjmp	.+20     	; 0x34e <clash+0x74>
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	07 c0       	rjmp	.+14     	; 0x34e <clash+0x74>
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	04 c0       	rjmp	.+8      	; 0x34e <clash+0x74>
 346:	ac 15       	cp	r26, r12
 348:	bd 05       	cpc	r27, r13
 34a:	e9 f6       	brne	.-70     	; 0x306 <clash+0x2c>
 34c:	f9 cf       	rjmp	.-14     	; 0x340 <clash+0x66>
 34e:	df 91       	pop	r29
 350:	cf 91       	pop	r28
 352:	1f 91       	pop	r17
 354:	0f 91       	pop	r16
 356:	ff 90       	pop	r15
 358:	ef 90       	pop	r14
 35a:	df 90       	pop	r13
 35c:	cf 90       	pop	r12
 35e:	08 95       	ret

00000360 <movePacman>:
 360:	cf 92       	push	r12
 362:	df 92       	push	r13
 364:	ef 92       	push	r14
 366:	ff 92       	push	r15
 368:	0f 93       	push	r16
 36a:	1f 93       	push	r17
 36c:	cf 93       	push	r28
 36e:	df 93       	push	r29
 370:	a0 91 6a 00 	lds	r26, 0x006A	; 0x80006a <px>
 374:	b0 91 6b 00 	lds	r27, 0x006B	; 0x80006b <px+0x1>
 378:	88 0f       	add	r24, r24
 37a:	99 1f       	adc	r25, r25
 37c:	fc 01       	movw	r30, r24
 37e:	ec 58       	subi	r30, 0x8C	; 140
 380:	fb 4f       	sbci	r31, 0xFB	; 251
 382:	c0 81       	ld	r28, Z
 384:	d1 81       	ldd	r29, Z+1	; 0x01
 386:	ca 0f       	add	r28, r26
 388:	db 1f       	adc	r29, r27
 38a:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <py>
 38e:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <py+0x1>
 392:	fc 01       	movw	r30, r24
 394:	e4 59       	subi	r30, 0x94	; 148
 396:	fb 4f       	sbci	r31, 0xFB	; 251
 398:	c0 80       	ld	r12, Z
 39a:	d1 80       	ldd	r13, Z+1	; 0x01
 39c:	c6 0e       	add	r12, r22
 39e:	d7 1e       	adc	r13, r23
 3a0:	fe 01       	movw	r30, r28
 3a2:	e2 95       	swap	r30
 3a4:	f2 95       	swap	r31
 3a6:	f0 7f       	andi	r31, 0xF0	; 240
 3a8:	fe 27       	eor	r31, r30
 3aa:	e0 7f       	andi	r30, 0xF0	; 240
 3ac:	fe 27       	eor	r31, r30
 3ae:	e4 59       	subi	r30, 0x94	; 148
 3b0:	ff 4f       	sbci	r31, 0xFF	; 255
 3b2:	ec 0d       	add	r30, r12
 3b4:	fd 1d       	adc	r31, r13
 3b6:	80 81       	ld	r24, Z
 3b8:	83 32       	cpi	r24, 0x23	; 35
 3ba:	09 f4       	brne	.+2      	; 0x3be <movePacman+0x5e>
 3bc:	fb c0       	rjmp	.+502    	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
 3be:	8e 01       	movw	r16, r28
 3c0:	0f 5f       	subi	r16, 0xFF	; 255
 3c2:	1f 4f       	sbci	r17, 0xFF	; 255
 3c4:	f8 01       	movw	r30, r16
 3c6:	e2 95       	swap	r30
 3c8:	f2 95       	swap	r31
 3ca:	f0 7f       	andi	r31, 0xF0	; 240
 3cc:	fe 27       	eor	r31, r30
 3ce:	e0 7f       	andi	r30, 0xF0	; 240
 3d0:	fe 27       	eor	r31, r30
 3d2:	e4 59       	subi	r30, 0x94	; 148
 3d4:	ff 4f       	sbci	r31, 0xFF	; 255
 3d6:	ec 0d       	add	r30, r12
 3d8:	fd 1d       	adc	r31, r13
 3da:	80 81       	ld	r24, Z
 3dc:	83 32       	cpi	r24, 0x23	; 35
 3de:	09 f4       	brne	.+2      	; 0x3e2 <movePacman+0x82>
 3e0:	e9 c0       	rjmp	.+466    	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
 3e2:	76 01       	movw	r14, r12
 3e4:	8f ef       	ldi	r24, 0xFF	; 255
 3e6:	e8 1a       	sub	r14, r24
 3e8:	f8 0a       	sbc	r15, r24
 3ea:	fe 01       	movw	r30, r28
 3ec:	e2 95       	swap	r30
 3ee:	f2 95       	swap	r31
 3f0:	f0 7f       	andi	r31, 0xF0	; 240
 3f2:	fe 27       	eor	r31, r30
 3f4:	e0 7f       	andi	r30, 0xF0	; 240
 3f6:	fe 27       	eor	r31, r30
 3f8:	e4 59       	subi	r30, 0x94	; 148
 3fa:	ff 4f       	sbci	r31, 0xFF	; 255
 3fc:	ee 0d       	add	r30, r14
 3fe:	ff 1d       	adc	r31, r15
 400:	80 81       	ld	r24, Z
 402:	83 32       	cpi	r24, 0x23	; 35
 404:	09 f4       	brne	.+2      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 406:	d6 c0       	rjmp	.+428    	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
 408:	f8 01       	movw	r30, r16
 40a:	e2 95       	swap	r30
 40c:	f2 95       	swap	r31
 40e:	f0 7f       	andi	r31, 0xF0	; 240
 410:	fe 27       	eor	r31, r30
 412:	e0 7f       	andi	r30, 0xF0	; 240
 414:	fe 27       	eor	r31, r30
 416:	e4 59       	subi	r30, 0x94	; 148
 418:	ff 4f       	sbci	r31, 0xFF	; 255
 41a:	ee 0d       	add	r30, r14
 41c:	ff 1d       	adc	r31, r15
 41e:	80 81       	ld	r24, Z
 420:	83 32       	cpi	r24, 0x23	; 35
 422:	09 f4       	brne	.+2      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 424:	c7 c0       	rjmp	.+398    	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
 426:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
 42a:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
 42e:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <gx>
 432:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <gx+0x1>
 436:	cd 01       	movw	r24, r26
 438:	0e 94 6d 01 	call	0x2da	; 0x2da <clash>
 43c:	89 2b       	or	r24, r25
 43e:	39 f0       	breq	.+14     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	90 93 7e 05 	sts	0x057E, r25	; 0x80057e <gameOver+0x1>
 448:	80 93 7d 05 	sts	0x057D, r24	; 0x80057d <gameOver>
 44c:	b3 c0       	rjmp	.+358    	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
 44e:	d0 93 6b 00 	sts	0x006B, r29	; 0x80006b <px+0x1>
 452:	c0 93 6a 00 	sts	0x006A, r28	; 0x80006a <px>
 456:	d0 92 69 00 	sts	0x0069, r13	; 0x800069 <py+0x1>
 45a:	c0 92 68 00 	sts	0x0068, r12	; 0x800068 <py>
 45e:	fe 01       	movw	r30, r28
 460:	e2 95       	swap	r30
 462:	f2 95       	swap	r31
 464:	f0 7f       	andi	r31, 0xF0	; 240
 466:	fe 27       	eor	r31, r30
 468:	e0 7f       	andi	r30, 0xF0	; 240
 46a:	fe 27       	eor	r31, r30
 46c:	e4 59       	subi	r30, 0x94	; 148
 46e:	ff 4f       	sbci	r31, 0xFF	; 255
 470:	ec 0d       	add	r30, r12
 472:	fd 1d       	adc	r31, r13
 474:	80 81       	ld	r24, Z
 476:	86 34       	cpi	r24, 0x46	; 70
 478:	51 f1       	breq	.+84     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
 47a:	fe 01       	movw	r30, r28
 47c:	e2 95       	swap	r30
 47e:	f2 95       	swap	r31
 480:	f0 7f       	andi	r31, 0xF0	; 240
 482:	fe 27       	eor	r31, r30
 484:	e0 7f       	andi	r30, 0xF0	; 240
 486:	fe 27       	eor	r31, r30
 488:	e4 59       	subi	r30, 0x94	; 148
 48a:	ff 4f       	sbci	r31, 0xFF	; 255
 48c:	ee 0d       	add	r30, r14
 48e:	ff 1d       	adc	r31, r15
 490:	80 81       	ld	r24, Z
 492:	86 34       	cpi	r24, 0x46	; 70
 494:	e1 f0       	breq	.+56     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
 496:	f8 01       	movw	r30, r16
 498:	e2 95       	swap	r30
 49a:	f2 95       	swap	r31
 49c:	f0 7f       	andi	r31, 0xF0	; 240
 49e:	fe 27       	eor	r31, r30
 4a0:	e0 7f       	andi	r30, 0xF0	; 240
 4a2:	fe 27       	eor	r31, r30
 4a4:	e4 59       	subi	r30, 0x94	; 148
 4a6:	ff 4f       	sbci	r31, 0xFF	; 255
 4a8:	ec 0d       	add	r30, r12
 4aa:	fd 1d       	adc	r31, r13
 4ac:	80 81       	ld	r24, Z
 4ae:	86 34       	cpi	r24, 0x46	; 70
 4b0:	71 f0       	breq	.+28     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
 4b2:	f8 01       	movw	r30, r16
 4b4:	e2 95       	swap	r30
 4b6:	f2 95       	swap	r31
 4b8:	f0 7f       	andi	r31, 0xF0	; 240
 4ba:	fe 27       	eor	r31, r30
 4bc:	e0 7f       	andi	r30, 0xF0	; 240
 4be:	fe 27       	eor	r31, r30
 4c0:	e4 59       	subi	r30, 0x94	; 148
 4c2:	ff 4f       	sbci	r31, 0xFF	; 255
 4c4:	ee 0d       	add	r30, r14
 4c6:	ff 1d       	adc	r31, r15
 4c8:	80 81       	ld	r24, Z
 4ca:	86 34       	cpi	r24, 0x46	; 70
 4cc:	59 f4       	brne	.+22     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 4ce:	85 e0       	ldi	r24, 0x05	; 5
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	90 93 85 05 	sts	0x0585, r25	; 0x800585 <buzzerRemainingTime+0x1>
 4d6:	80 93 84 05 	sts	0x0584, r24	; 0x800584 <buzzerRemainingTime>
 4da:	10 92 87 05 	sts	0x0587, r1	; 0x800587 <ghostEnabled+0x1>
 4de:	10 92 86 05 	sts	0x0586, r1	; 0x800586 <ghostEnabled>
 4e2:	06 c0       	rjmp	.+12     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	90 93 87 05 	sts	0x0587, r25	; 0x800587 <ghostEnabled+0x1>
 4ec:	80 93 86 05 	sts	0x0586, r24	; 0x800586 <ghostEnabled>
 4f0:	fe 01       	movw	r30, r28
 4f2:	e2 95       	swap	r30
 4f4:	f2 95       	swap	r31
 4f6:	f0 7f       	andi	r31, 0xF0	; 240
 4f8:	fe 27       	eor	r31, r30
 4fa:	e0 7f       	andi	r30, 0xF0	; 240
 4fc:	fe 27       	eor	r31, r30
 4fe:	e4 59       	subi	r30, 0x94	; 148
 500:	ff 4f       	sbci	r31, 0xFF	; 255
 502:	ec 0d       	add	r30, r12
 504:	fd 1d       	adc	r31, r13
 506:	80 81       	ld	r24, Z
 508:	86 34       	cpi	r24, 0x46	; 70
 50a:	69 f4       	brne	.+26     	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
 50c:	fe 01       	movw	r30, r28
 50e:	e2 95       	swap	r30
 510:	f2 95       	swap	r31
 512:	f0 7f       	andi	r31, 0xF0	; 240
 514:	fe 27       	eor	r31, r30
 516:	e0 7f       	andi	r30, 0xF0	; 240
 518:	fe 27       	eor	r31, r30
 51a:	e4 59       	subi	r30, 0x94	; 148
 51c:	ff 4f       	sbci	r31, 0xFF	; 255
 51e:	ec 0d       	add	r30, r12
 520:	fd 1d       	adc	r31, r13
 522:	8e e2       	ldi	r24, 0x2E	; 46
 524:	80 83       	st	Z, r24
 526:	f8 01       	movw	r30, r16
 528:	e2 95       	swap	r30
 52a:	f2 95       	swap	r31
 52c:	f0 7f       	andi	r31, 0xF0	; 240
 52e:	fe 27       	eor	r31, r30
 530:	e0 7f       	andi	r30, 0xF0	; 240
 532:	fe 27       	eor	r31, r30
 534:	e4 59       	subi	r30, 0x94	; 148
 536:	ff 4f       	sbci	r31, 0xFF	; 255
 538:	ec 0d       	add	r30, r12
 53a:	fd 1d       	adc	r31, r13
 53c:	80 81       	ld	r24, Z
 53e:	86 34       	cpi	r24, 0x46	; 70
 540:	71 f4       	brne	.+28     	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
 542:	c8 01       	movw	r24, r16
 544:	82 95       	swap	r24
 546:	92 95       	swap	r25
 548:	90 7f       	andi	r25, 0xF0	; 240
 54a:	98 27       	eor	r25, r24
 54c:	80 7f       	andi	r24, 0xF0	; 240
 54e:	98 27       	eor	r25, r24
 550:	84 59       	subi	r24, 0x94	; 148
 552:	9f 4f       	sbci	r25, 0xFF	; 255
 554:	fc 01       	movw	r30, r24
 556:	ec 0d       	add	r30, r12
 558:	fd 1d       	adc	r31, r13
 55a:	8e e2       	ldi	r24, 0x2E	; 46
 55c:	80 83       	st	Z, r24
 55e:	fe 01       	movw	r30, r28
 560:	e2 95       	swap	r30
 562:	f2 95       	swap	r31
 564:	f0 7f       	andi	r31, 0xF0	; 240
 566:	fe 27       	eor	r31, r30
 568:	e0 7f       	andi	r30, 0xF0	; 240
 56a:	fe 27       	eor	r31, r30
 56c:	e4 59       	subi	r30, 0x94	; 148
 56e:	ff 4f       	sbci	r31, 0xFF	; 255
 570:	ee 0d       	add	r30, r14
 572:	ff 1d       	adc	r31, r15
 574:	80 81       	ld	r24, Z
 576:	86 34       	cpi	r24, 0x46	; 70
 578:	11 f4       	brne	.+4      	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
 57a:	8e e2       	ldi	r24, 0x2E	; 46
 57c:	80 83       	st	Z, r24
 57e:	f8 01       	movw	r30, r16
 580:	e2 95       	swap	r30
 582:	f2 95       	swap	r31
 584:	f0 7f       	andi	r31, 0xF0	; 240
 586:	fe 27       	eor	r31, r30
 588:	e0 7f       	andi	r30, 0xF0	; 240
 58a:	fe 27       	eor	r31, r30
 58c:	e4 59       	subi	r30, 0x94	; 148
 58e:	ff 4f       	sbci	r31, 0xFF	; 255
 590:	ee 0d       	add	r30, r14
 592:	ff 1d       	adc	r31, r15
 594:	80 81       	ld	r24, Z
 596:	86 34       	cpi	r24, 0x46	; 70
 598:	69 f4       	brne	.+26     	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
 59a:	02 95       	swap	r16
 59c:	12 95       	swap	r17
 59e:	10 7f       	andi	r17, 0xF0	; 240
 5a0:	10 27       	eor	r17, r16
 5a2:	00 7f       	andi	r16, 0xF0	; 240
 5a4:	10 27       	eor	r17, r16
 5a6:	04 59       	subi	r16, 0x94	; 148
 5a8:	1f 4f       	sbci	r17, 0xFF	; 255
 5aa:	f8 01       	movw	r30, r16
 5ac:	ee 0d       	add	r30, r14
 5ae:	ff 1d       	adc	r31, r15
 5b0:	8e e2       	ldi	r24, 0x2E	; 46
 5b2:	80 83       	st	Z, r24
 5b4:	df 91       	pop	r29
 5b6:	cf 91       	pop	r28
 5b8:	1f 91       	pop	r17
 5ba:	0f 91       	pop	r16
 5bc:	ff 90       	pop	r15
 5be:	ef 90       	pop	r14
 5c0:	df 90       	pop	r13
 5c2:	cf 90       	pop	r12
 5c4:	08 95       	ret

000005c6 <buzz>:
 5c6:	80 91 84 05 	lds	r24, 0x0584	; 0x800584 <buzzerRemainingTime>
 5ca:	90 91 85 05 	lds	r25, 0x0585	; 0x800585 <buzzerRemainingTime+0x1>
 5ce:	18 16       	cp	r1, r24
 5d0:	19 06       	cpc	r1, r25
 5d2:	14 f4       	brge	.+4      	; 0x5d8 <buzz+0x12>
 5d4:	c2 9a       	sbi	0x18, 2	; 24
 5d6:	01 c0       	rjmp	.+2      	; 0x5da <buzz+0x14>
 5d8:	c2 98       	cbi	0x18, 2	; 24
 5da:	80 91 84 05 	lds	r24, 0x0584	; 0x800584 <buzzerRemainingTime>
 5de:	90 91 85 05 	lds	r25, 0x0585	; 0x800585 <buzzerRemainingTime+0x1>
 5e2:	89 2b       	or	r24, r25
 5e4:	49 f0       	breq	.+18     	; 0x5f8 <buzz+0x32>
 5e6:	80 91 84 05 	lds	r24, 0x0584	; 0x800584 <buzzerRemainingTime>
 5ea:	90 91 85 05 	lds	r25, 0x0585	; 0x800585 <buzzerRemainingTime+0x1>
 5ee:	01 97       	sbiw	r24, 0x01	; 1
 5f0:	90 93 85 05 	sts	0x0585, r25	; 0x800585 <buzzerRemainingTime+0x1>
 5f4:	80 93 84 05 	sts	0x0584, r24	; 0x800584 <buzzerRemainingTime>
 5f8:	08 95       	ret

000005fa <moveGhost>:
 5fa:	9c 01       	movw	r18, r24
 5fc:	22 0f       	add	r18, r18
 5fe:	33 1f       	adc	r19, r19
 600:	f9 01       	movw	r30, r18
 602:	ec 59       	subi	r30, 0x9C	; 156
 604:	ff 4f       	sbci	r31, 0xFF	; 255
 606:	66 0f       	add	r22, r22
 608:	77 1f       	adc	r23, r23
 60a:	db 01       	movw	r26, r22
 60c:	ac 58       	subi	r26, 0x8C	; 140
 60e:	bb 4f       	sbci	r27, 0xFB	; 251
 610:	01 90       	ld	r0, Z+
 612:	f0 81       	ld	r31, Z
 614:	e0 2d       	mov	r30, r0
 616:	4d 91       	ld	r20, X+
 618:	5c 91       	ld	r21, X
 61a:	4e 0f       	add	r20, r30
 61c:	5f 1f       	adc	r21, r31
 61e:	f9 01       	movw	r30, r18
 620:	e0 5a       	subi	r30, 0xA0	; 160
 622:	ff 4f       	sbci	r31, 0xFF	; 255
 624:	db 01       	movw	r26, r22
 626:	a4 59       	subi	r26, 0x94	; 148
 628:	bb 4f       	sbci	r27, 0xFB	; 251
 62a:	01 90       	ld	r0, Z+
 62c:	f0 81       	ld	r31, Z
 62e:	e0 2d       	mov	r30, r0
 630:	2d 91       	ld	r18, X+
 632:	3c 91       	ld	r19, X
 634:	2e 0f       	add	r18, r30
 636:	3f 1f       	adc	r19, r31
 638:	fa 01       	movw	r30, r20
 63a:	e2 95       	swap	r30
 63c:	f2 95       	swap	r31
 63e:	f0 7f       	andi	r31, 0xF0	; 240
 640:	fe 27       	eor	r31, r30
 642:	e0 7f       	andi	r30, 0xF0	; 240
 644:	fe 27       	eor	r31, r30
 646:	e4 59       	subi	r30, 0x94	; 148
 648:	ff 4f       	sbci	r31, 0xFF	; 255
 64a:	e2 0f       	add	r30, r18
 64c:	f3 1f       	adc	r31, r19
 64e:	60 81       	ld	r22, Z
 650:	63 32       	cpi	r22, 0x23	; 35
 652:	09 f4       	brne	.+2      	; 0x656 <moveGhost+0x5c>
 654:	4c c0       	rjmp	.+152    	; 0x6ee <moveGhost+0xf4>
 656:	ba 01       	movw	r22, r20
 658:	6f 5f       	subi	r22, 0xFF	; 255
 65a:	7f 4f       	sbci	r23, 0xFF	; 255
 65c:	fb 01       	movw	r30, r22
 65e:	e2 95       	swap	r30
 660:	f2 95       	swap	r31
 662:	f0 7f       	andi	r31, 0xF0	; 240
 664:	fe 27       	eor	r31, r30
 666:	e0 7f       	andi	r30, 0xF0	; 240
 668:	fe 27       	eor	r31, r30
 66a:	e4 59       	subi	r30, 0x94	; 148
 66c:	ff 4f       	sbci	r31, 0xFF	; 255
 66e:	e2 0f       	add	r30, r18
 670:	f3 1f       	adc	r31, r19
 672:	e0 81       	ld	r30, Z
 674:	e3 32       	cpi	r30, 0x23	; 35
 676:	d9 f1       	breq	.+118    	; 0x6ee <moveGhost+0xf4>
 678:	d9 01       	movw	r26, r18
 67a:	11 96       	adiw	r26, 0x01	; 1
 67c:	fa 01       	movw	r30, r20
 67e:	e2 95       	swap	r30
 680:	f2 95       	swap	r31
 682:	f0 7f       	andi	r31, 0xF0	; 240
 684:	fe 27       	eor	r31, r30
 686:	e0 7f       	andi	r30, 0xF0	; 240
 688:	fe 27       	eor	r31, r30
 68a:	e4 59       	subi	r30, 0x94	; 148
 68c:	ff 4f       	sbci	r31, 0xFF	; 255
 68e:	ea 0f       	add	r30, r26
 690:	fb 1f       	adc	r31, r27
 692:	e0 81       	ld	r30, Z
 694:	e3 32       	cpi	r30, 0x23	; 35
 696:	59 f1       	breq	.+86     	; 0x6ee <moveGhost+0xf4>
 698:	62 95       	swap	r22
 69a:	72 95       	swap	r23
 69c:	70 7f       	andi	r23, 0xF0	; 240
 69e:	76 27       	eor	r23, r22
 6a0:	60 7f       	andi	r22, 0xF0	; 240
 6a2:	76 27       	eor	r23, r22
 6a4:	64 59       	subi	r22, 0x94	; 148
 6a6:	7f 4f       	sbci	r23, 0xFF	; 255
 6a8:	a6 0f       	add	r26, r22
 6aa:	b7 1f       	adc	r27, r23
 6ac:	6c 91       	ld	r22, X
 6ae:	63 32       	cpi	r22, 0x23	; 35
 6b0:	f1 f0       	breq	.+60     	; 0x6ee <moveGhost+0xf4>
 6b2:	88 0f       	add	r24, r24
 6b4:	99 1f       	adc	r25, r25
 6b6:	fc 01       	movw	r30, r24
 6b8:	ec 59       	subi	r30, 0x9C	; 156
 6ba:	ff 4f       	sbci	r31, 0xFF	; 255
 6bc:	51 83       	std	Z+1, r21	; 0x01
 6be:	40 83       	st	Z, r20
 6c0:	fc 01       	movw	r30, r24
 6c2:	e0 5a       	subi	r30, 0xA0	; 160
 6c4:	ff 4f       	sbci	r31, 0xFF	; 255
 6c6:	31 83       	std	Z+1, r19	; 0x01
 6c8:	20 83       	st	Z, r18
 6ca:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <py>
 6ce:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <py+0x1>
 6d2:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <px>
 6d6:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <px+0x1>
 6da:	0e 94 6d 01 	call	0x2da	; 0x2da <clash>
 6de:	89 2b       	or	r24, r25
 6e0:	31 f0       	breq	.+12     	; 0x6ee <moveGhost+0xf4>
 6e2:	81 e0       	ldi	r24, 0x01	; 1
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	90 93 7e 05 	sts	0x057E, r25	; 0x80057e <gameOver+0x1>
 6ea:	80 93 7d 05 	sts	0x057D, r24	; 0x80057d <gameOver>
 6ee:	08 95       	ret

000006f0 <ghostStrategyShortestPath>:
 6f0:	2f 92       	push	r2
 6f2:	3f 92       	push	r3
 6f4:	4f 92       	push	r4
 6f6:	5f 92       	push	r5
 6f8:	6f 92       	push	r6
 6fa:	7f 92       	push	r7
 6fc:	8f 92       	push	r8
 6fe:	9f 92       	push	r9
 700:	af 92       	push	r10
 702:	bf 92       	push	r11
 704:	cf 92       	push	r12
 706:	df 92       	push	r13
 708:	ef 92       	push	r14
 70a:	ff 92       	push	r15
 70c:	0f 93       	push	r16
 70e:	1f 93       	push	r17
 710:	cf 93       	push	r28
 712:	df 93       	push	r29
 714:	1c 01       	movw	r2, r24
 716:	e8 e8       	ldi	r30, 0x88	; 136
 718:	f5 e0       	ldi	r31, 0x05	; 5
 71a:	48 e8       	ldi	r20, 0x88	; 136
 71c:	56 e0       	ldi	r21, 0x06	; 6
 71e:	2f ef       	ldi	r18, 0xFF	; 255
 720:	08 c0       	rjmp	.+16     	; 0x732 <ghostStrategyShortestPath+0x42>
 722:	21 93       	st	Z+, r18
 724:	e8 17       	cp	r30, r24
 726:	f9 07       	cpc	r31, r25
 728:	e1 f7       	brne	.-8      	; 0x722 <ghostStrategyShortestPath+0x32>
 72a:	fc 01       	movw	r30, r24
 72c:	48 17       	cp	r20, r24
 72e:	59 07       	cpc	r21, r25
 730:	19 f0       	breq	.+6      	; 0x738 <ghostStrategyShortestPath+0x48>
 732:	cf 01       	movw	r24, r30
 734:	40 96       	adiw	r24, 0x10	; 16
 736:	f5 cf       	rjmp	.-22     	; 0x722 <ghostStrategyShortestPath+0x32>
 738:	20 91 6a 00 	lds	r18, 0x006A	; 0x80006a <px>
 73c:	30 91 6b 00 	lds	r19, 0x006B	; 0x80006b <px+0x1>
 740:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <py>
 744:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <py+0x1>
 748:	22 95       	swap	r18
 74a:	32 95       	swap	r19
 74c:	30 7f       	andi	r19, 0xF0	; 240
 74e:	32 27       	eor	r19, r18
 750:	20 7f       	andi	r18, 0xF0	; 240
 752:	32 27       	eor	r19, r18
 754:	f9 01       	movw	r30, r18
 756:	e8 57       	subi	r30, 0x78	; 120
 758:	fa 4f       	sbci	r31, 0xFA	; 250
 75a:	e8 0f       	add	r30, r24
 75c:	f9 1f       	adc	r31, r25
 75e:	10 82       	st	Z, r1
 760:	10 92 7c 05 	sts	0x057C, r1	; 0x80057c <frontptr>
 764:	91 e0       	ldi	r25, 0x01	; 1
 766:	90 93 83 05 	sts	0x0583, r25	; 0x800583 <backptr>
 76a:	82 2b       	or	r24, r18
 76c:	80 93 88 06 	sts	0x0688, r24	; 0x800688 <q>
 770:	44 24       	eor	r4, r4
 772:	43 94       	inc	r4
 774:	e0 e0       	ldi	r30, 0x00	; 0
 776:	0c e7       	ldi	r16, 0x7C	; 124
 778:	14 e0       	ldi	r17, 0x04	; 4
 77a:	55 24       	eor	r5, r5
 77c:	53 94       	inc	r5
 77e:	5e 0e       	add	r5, r30
 780:	f0 e0       	ldi	r31, 0x00	; 0
 782:	e8 57       	subi	r30, 0x78	; 120
 784:	f9 4f       	sbci	r31, 0xF9	; 249
 786:	40 81       	ld	r20, Z
 788:	64 2f       	mov	r22, r20
 78a:	70 e0       	ldi	r23, 0x00	; 0
 78c:	75 95       	asr	r23
 78e:	67 95       	ror	r22
 790:	75 95       	asr	r23
 792:	67 95       	ror	r22
 794:	75 95       	asr	r23
 796:	67 95       	ror	r22
 798:	75 95       	asr	r23
 79a:	67 95       	ror	r22
 79c:	4f 70       	andi	r20, 0x0F	; 15
 79e:	50 e0       	ldi	r21, 0x00	; 0
 7a0:	0f 2e       	mov	r0, r31
 7a2:	f4 e7       	ldi	r31, 0x74	; 116
 7a4:	af 2e       	mov	r10, r31
 7a6:	f4 e0       	ldi	r31, 0x04	; 4
 7a8:	bf 2e       	mov	r11, r31
 7aa:	f0 2d       	mov	r31, r0
 7ac:	0f 2e       	mov	r0, r31
 7ae:	fc e6       	ldi	r31, 0x6C	; 108
 7b0:	cf 2e       	mov	r12, r31
 7b2:	f4 e0       	ldi	r31, 0x04	; 4
 7b4:	df 2e       	mov	r13, r31
 7b6:	f0 2d       	mov	r31, r0
 7b8:	d6 01       	movw	r26, r12
 7ba:	f5 01       	movw	r30, r10
 7bc:	cb 01       	movw	r24, r22
 7be:	82 95       	swap	r24
 7c0:	92 95       	swap	r25
 7c2:	90 7f       	andi	r25, 0xF0	; 240
 7c4:	98 27       	eor	r25, r24
 7c6:	80 7f       	andi	r24, 0xF0	; 240
 7c8:	98 27       	eor	r25, r24
 7ca:	88 57       	subi	r24, 0x78	; 120
 7cc:	9a 4f       	sbci	r25, 0xFA	; 250
 7ce:	3c 01       	movw	r6, r24
 7d0:	64 0e       	add	r6, r20
 7d2:	75 1e       	adc	r7, r21
 7d4:	21 91       	ld	r18, Z+
 7d6:	31 91       	ld	r19, Z+
 7d8:	26 0f       	add	r18, r22
 7da:	37 1f       	adc	r19, r23
 7dc:	8d 91       	ld	r24, X+
 7de:	9d 91       	ld	r25, X+
 7e0:	84 0f       	add	r24, r20
 7e2:	95 1f       	adc	r25, r21
 7e4:	e9 01       	movw	r28, r18
 7e6:	c2 95       	swap	r28
 7e8:	d2 95       	swap	r29
 7ea:	d0 7f       	andi	r29, 0xF0	; 240
 7ec:	dc 27       	eor	r29, r28
 7ee:	c0 7f       	andi	r28, 0xF0	; 240
 7f0:	dc 27       	eor	r29, r28
 7f2:	c8 57       	subi	r28, 0x78	; 120
 7f4:	da 4f       	sbci	r29, 0xFA	; 250
 7f6:	c8 0f       	add	r28, r24
 7f8:	d9 1f       	adc	r29, r25
 7fa:	c8 81       	ld	r28, Y
 7fc:	cf 3f       	cpi	r28, 0xFF	; 255
 7fe:	09 f0       	breq	.+2      	; 0x802 <ghostStrategyShortestPath+0x112>
 800:	5c c0       	rjmp	.+184    	; 0x8ba <__stack+0x5b>
 802:	e9 01       	movw	r28, r18
 804:	c2 95       	swap	r28
 806:	d2 95       	swap	r29
 808:	d0 7f       	andi	r29, 0xF0	; 240
 80a:	dc 27       	eor	r29, r28
 80c:	c0 7f       	andi	r28, 0xF0	; 240
 80e:	dc 27       	eor	r29, r28
 810:	c4 59       	subi	r28, 0x94	; 148
 812:	df 4f       	sbci	r29, 0xFF	; 255
 814:	c8 0f       	add	r28, r24
 816:	d9 1f       	adc	r29, r25
 818:	c8 81       	ld	r28, Y
 81a:	c3 32       	cpi	r28, 0x23	; 35
 81c:	09 f4       	brne	.+2      	; 0x820 <ghostStrategyShortestPath+0x130>
 81e:	4d c0       	rjmp	.+154    	; 0x8ba <__stack+0x5b>
 820:	79 01       	movw	r14, r18
 822:	cf ef       	ldi	r28, 0xFF	; 255
 824:	ec 1a       	sub	r14, r28
 826:	fc 0a       	sbc	r15, r28
 828:	e7 01       	movw	r28, r14
 82a:	c2 95       	swap	r28
 82c:	d2 95       	swap	r29
 82e:	d0 7f       	andi	r29, 0xF0	; 240
 830:	dc 27       	eor	r29, r28
 832:	c0 7f       	andi	r28, 0xF0	; 240
 834:	dc 27       	eor	r29, r28
 836:	c4 59       	subi	r28, 0x94	; 148
 838:	df 4f       	sbci	r29, 0xFF	; 255
 83a:	c8 0f       	add	r28, r24
 83c:	d9 1f       	adc	r29, r25
 83e:	c8 81       	ld	r28, Y
 840:	c3 32       	cpi	r28, 0x23	; 35
 842:	d9 f1       	breq	.+118    	; 0x8ba <__stack+0x5b>
 844:	4c 01       	movw	r8, r24
 846:	df ef       	ldi	r29, 0xFF	; 255
 848:	8d 1a       	sub	r8, r29
 84a:	9d 0a       	sbc	r9, r29
 84c:	e9 01       	movw	r28, r18
 84e:	c2 95       	swap	r28
 850:	d2 95       	swap	r29
 852:	d0 7f       	andi	r29, 0xF0	; 240
 854:	dc 27       	eor	r29, r28
 856:	c0 7f       	andi	r28, 0xF0	; 240
 858:	dc 27       	eor	r29, r28
 85a:	c4 59       	subi	r28, 0x94	; 148
 85c:	df 4f       	sbci	r29, 0xFF	; 255
 85e:	c8 0d       	add	r28, r8
 860:	d9 1d       	adc	r29, r9
 862:	c8 81       	ld	r28, Y
 864:	c3 32       	cpi	r28, 0x23	; 35
 866:	49 f1       	breq	.+82     	; 0x8ba <__stack+0x5b>
 868:	e7 01       	movw	r28, r14
 86a:	c2 95       	swap	r28
 86c:	d2 95       	swap	r29
 86e:	d0 7f       	andi	r29, 0xF0	; 240
 870:	dc 27       	eor	r29, r28
 872:	c0 7f       	andi	r28, 0xF0	; 240
 874:	dc 27       	eor	r29, r28
 876:	c4 59       	subi	r28, 0x94	; 148
 878:	df 4f       	sbci	r29, 0xFF	; 255
 87a:	c8 0d       	add	r28, r8
 87c:	d9 1d       	adc	r29, r9
 87e:	c8 81       	ld	r28, Y
 880:	c3 32       	cpi	r28, 0x23	; 35
 882:	d9 f0       	breq	.+54     	; 0x8ba <__stack+0x5b>
 884:	79 01       	movw	r14, r18
 886:	ee 0c       	add	r14, r14
 888:	ff 1c       	adc	r15, r15
 88a:	ee 0c       	add	r14, r14
 88c:	ff 1c       	adc	r15, r15
 88e:	ee 0c       	add	r14, r14
 890:	ff 1c       	adc	r15, r15
 892:	ee 0c       	add	r14, r14
 894:	ff 1c       	adc	r15, r15
 896:	97 01       	movw	r18, r14
 898:	28 57       	subi	r18, 0x78	; 120
 89a:	3a 4f       	sbci	r19, 0xFA	; 250
 89c:	28 0f       	add	r18, r24
 89e:	39 1f       	adc	r19, r25
 8a0:	e3 01       	movw	r28, r6
 8a2:	98 81       	ld	r25, Y
 8a4:	9f 5f       	subi	r25, 0xFF	; 255
 8a6:	e9 01       	movw	r28, r18
 8a8:	98 83       	st	Y, r25
 8aa:	24 2d       	mov	r18, r4
 8ac:	30 e0       	ldi	r19, 0x00	; 0
 8ae:	28 57       	subi	r18, 0x78	; 120
 8b0:	39 4f       	sbci	r19, 0xF9	; 249
 8b2:	8e 29       	or	r24, r14
 8b4:	e9 01       	movw	r28, r18
 8b6:	88 83       	st	Y, r24
 8b8:	43 94       	inc	r4
 8ba:	e0 17       	cp	r30, r16
 8bc:	f1 07       	cpc	r31, r17
 8be:	09 f0       	breq	.+2      	; 0x8c2 <__stack+0x63>
 8c0:	89 cf       	rjmp	.-238    	; 0x7d4 <ghostStrategyShortestPath+0xe4>
 8c2:	e5 2d       	mov	r30, r5
 8c4:	54 14       	cp	r5, r4
 8c6:	08 f4       	brcc	.+2      	; 0x8ca <__stack+0x6b>
 8c8:	58 cf       	rjmp	.-336    	; 0x77a <ghostStrategyShortestPath+0x8a>
 8ca:	40 92 83 05 	sts	0x0583, r4	; 0x800583 <backptr>
 8ce:	50 92 7c 05 	sts	0x057C, r5	; 0x80057c <frontptr>
 8d2:	c1 01       	movw	r24, r2
 8d4:	88 0f       	add	r24, r24
 8d6:	99 1f       	adc	r25, r25
 8d8:	fc 01       	movw	r30, r24
 8da:	ec 59       	subi	r30, 0x9C	; 156
 8dc:	ff 4f       	sbci	r31, 0xFF	; 255
 8de:	c0 81       	ld	r28, Z
 8e0:	d1 81       	ldd	r29, Z+1	; 0x01
 8e2:	fc 01       	movw	r30, r24
 8e4:	e0 5a       	subi	r30, 0xA0	; 160
 8e6:	ff 4f       	sbci	r31, 0xFF	; 255
 8e8:	00 81       	ld	r16, Z
 8ea:	11 81       	ldd	r17, Z+1	; 0x01
 8ec:	40 e0       	ldi	r20, 0x00	; 0
 8ee:	50 e0       	ldi	r21, 0x00	; 0
 8f0:	80 e0       	ldi	r24, 0x00	; 0
 8f2:	90 e0       	ldi	r25, 0x00	; 0
 8f4:	ef ef       	ldi	r30, 0xFF	; 255
 8f6:	f0 e0       	ldi	r31, 0x00	; 0
 8f8:	d5 01       	movw	r26, r10
 8fa:	2d 91       	ld	r18, X+
 8fc:	3d 91       	ld	r19, X+
 8fe:	5d 01       	movw	r10, r26
 900:	d6 01       	movw	r26, r12
 902:	6d 91       	ld	r22, X+
 904:	7d 91       	ld	r23, X+
 906:	6d 01       	movw	r12, r26
 908:	2c 0f       	add	r18, r28
 90a:	3d 1f       	adc	r19, r29
 90c:	22 95       	swap	r18
 90e:	32 95       	swap	r19
 910:	30 7f       	andi	r19, 0xF0	; 240
 912:	32 27       	eor	r19, r18
 914:	20 7f       	andi	r18, 0xF0	; 240
 916:	32 27       	eor	r19, r18
 918:	28 57       	subi	r18, 0x78	; 120
 91a:	3a 4f       	sbci	r19, 0xFA	; 250
 91c:	20 0f       	add	r18, r16
 91e:	31 1f       	adc	r19, r17
 920:	26 0f       	add	r18, r22
 922:	37 1f       	adc	r19, r23
 924:	d9 01       	movw	r26, r18
 926:	2c 91       	ld	r18, X
 928:	30 e0       	ldi	r19, 0x00	; 0
 92a:	2e 17       	cp	r18, r30
 92c:	3f 07       	cpc	r19, r31
 92e:	1c f4       	brge	.+6      	; 0x936 <__stack+0xd7>
 930:	84 2f       	mov	r24, r20
 932:	95 2f       	mov	r25, r21
 934:	f9 01       	movw	r30, r18
 936:	4f 5f       	subi	r20, 0xFF	; 255
 938:	5f 4f       	sbci	r21, 0xFF	; 255
 93a:	44 30       	cpi	r20, 0x04	; 4
 93c:	51 05       	cpc	r21, r1
 93e:	e1 f6       	brne	.-72     	; 0x8f8 <__stack+0x99>
 940:	df 91       	pop	r29
 942:	cf 91       	pop	r28
 944:	1f 91       	pop	r17
 946:	0f 91       	pop	r16
 948:	ff 90       	pop	r15
 94a:	ef 90       	pop	r14
 94c:	df 90       	pop	r13
 94e:	cf 90       	pop	r12
 950:	bf 90       	pop	r11
 952:	af 90       	pop	r10
 954:	9f 90       	pop	r9
 956:	8f 90       	pop	r8
 958:	7f 90       	pop	r7
 95a:	6f 90       	pop	r6
 95c:	5f 90       	pop	r5
 95e:	4f 90       	pop	r4
 960:	3f 90       	pop	r3
 962:	2f 90       	pop	r2
 964:	08 95       	ret

00000966 <displayStartScreen>:

void displayStartScreen()
{
 966:	ef 92       	push	r14
 968:	ff 92       	push	r15
 96a:	0f 93       	push	r16
 96c:	1f 93       	push	r17
 96e:	cf 93       	push	r28
 970:	df 93       	push	r29
 972:	0f 2e       	mov	r0, r31
 974:	fc e6       	ldi	r31, 0x6C	; 108
 976:	ef 2e       	mov	r14, r31
 978:	f1 e0       	ldi	r31, 0x01	; 1
 97a:	ff 2e       	mov	r15, r31
 97c:	f0 2d       	mov	r31, r0
 97e:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i=0; i<16; i++) {
		setBoardCommon(i);
 980:	8d 2f       	mov	r24, r29
 982:	0e 94 57 00 	call	0xae	; 0xae <setBoardCommon>
 986:	87 01       	movw	r16, r14
 988:	c0 e0       	ldi	r28, 0x00	; 0
		for (int j=0; j<16; j++) {
			if (startScreen[i][j] == '.')			continue;
 98a:	f8 01       	movw	r30, r16
 98c:	81 91       	ld	r24, Z+
 98e:	8f 01       	movw	r16, r30
 990:	8e 32       	cpi	r24, 0x2E	; 46
 992:	59 f0       	breq	.+22     	; 0x9aa <displayStartScreen+0x44>
			else if (startScreen[i][j] == '#') {
 994:	83 32       	cpi	r24, 0x23	; 35
 996:	19 f4       	brne	.+6      	; 0x99e <displayStartScreen+0x38>
				setBoardRed(j);
 998:	8c 2f       	mov	r24, r28
 99a:	0e 94 5f 00 	call	0xbe	; 0xbe <setBoardRed>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 99e:	f2 e4       	ldi	r31, 0x42	; 66
 9a0:	fa 95       	dec	r31
 9a2:	f1 f7       	brne	.-4      	; 0x9a0 <displayStartScreen+0x3a>
 9a4:	00 c0       	rjmp	.+0      	; 0x9a6 <displayStartScreen+0x40>
			}
			_delay_us(RENDER_DELAY_US);
			reset();
 9a6:	0e 94 74 00 	call	0xe8	; 0xe8 <reset>
 9aa:	cf 5f       	subi	r28, 0xFF	; 255

void displayStartScreen()
{
	for (int i=0; i<16; i++) {
		setBoardCommon(i);
		for (int j=0; j<16; j++) {
 9ac:	c0 31       	cpi	r28, 0x10	; 16
 9ae:	69 f7       	brne	.-38     	; 0x98a <displayStartScreen+0x24>
 9b0:	df 5f       	subi	r29, 0xFF	; 255
 9b2:	80 e1       	ldi	r24, 0x10	; 16
 9b4:	e8 0e       	add	r14, r24
 9b6:	f1 1c       	adc	r15, r1
	return ghostStrategyShortestPath(id);
}

void displayStartScreen()
{
	for (int i=0; i<16; i++) {
 9b8:	d0 31       	cpi	r29, 0x10	; 16
 9ba:	11 f7       	brne	.-60     	; 0x980 <displayStartScreen+0x1a>
			}
			_delay_us(RENDER_DELAY_US);
			reset();
		}
	}
}
 9bc:	df 91       	pop	r29
 9be:	cf 91       	pop	r28
 9c0:	1f 91       	pop	r17
 9c2:	0f 91       	pop	r16
 9c4:	ff 90       	pop	r15
 9c6:	ef 90       	pop	r14
 9c8:	08 95       	ret

000009ca <displayGameOverScreen>:

void displayGameOverScreen()
{
 9ca:	ef 92       	push	r14
 9cc:	ff 92       	push	r15
 9ce:	0f 93       	push	r16
 9d0:	1f 93       	push	r17
 9d2:	cf 93       	push	r28
 9d4:	df 93       	push	r29
 9d6:	0f 2e       	mov	r0, r31
 9d8:	fc e6       	ldi	r31, 0x6C	; 108
 9da:	ef 2e       	mov	r14, r31
 9dc:	f3 e0       	ldi	r31, 0x03	; 3
 9de:	ff 2e       	mov	r15, r31
 9e0:	f0 2d       	mov	r31, r0
 9e2:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i=0; i<16; i++) {
		setBoardCommon(i);
 9e4:	8d 2f       	mov	r24, r29
 9e6:	0e 94 57 00 	call	0xae	; 0xae <setBoardCommon>
 9ea:	87 01       	movw	r16, r14
 9ec:	c0 e0       	ldi	r28, 0x00	; 0
		for (int j=0; j<16; j++) {
			if (endScreen[i][j] == '.')			continue;
 9ee:	f8 01       	movw	r30, r16
 9f0:	81 91       	ld	r24, Z+
 9f2:	8f 01       	movw	r16, r30
 9f4:	8e 32       	cpi	r24, 0x2E	; 46
 9f6:	59 f0       	breq	.+22     	; 0xa0e <displayGameOverScreen+0x44>
			else if (endScreen[i][j] == '#') {
 9f8:	83 32       	cpi	r24, 0x23	; 35
 9fa:	19 f4       	brne	.+6      	; 0xa02 <displayGameOverScreen+0x38>
				setBoardRed(j);
 9fc:	8c 2f       	mov	r24, r28
 9fe:	0e 94 5f 00 	call	0xbe	; 0xbe <setBoardRed>
 a02:	f2 e4       	ldi	r31, 0x42	; 66
 a04:	fa 95       	dec	r31
 a06:	f1 f7       	brne	.-4      	; 0xa04 <displayGameOverScreen+0x3a>
 a08:	00 c0       	rjmp	.+0      	; 0xa0a <displayGameOverScreen+0x40>
			}
			_delay_us(RENDER_DELAY_US);
			reset();
 a0a:	0e 94 74 00 	call	0xe8	; 0xe8 <reset>
 a0e:	cf 5f       	subi	r28, 0xFF	; 255

void displayGameOverScreen()
{
	for (int i=0; i<16; i++) {
		setBoardCommon(i);
		for (int j=0; j<16; j++) {
 a10:	c0 31       	cpi	r28, 0x10	; 16
 a12:	69 f7       	brne	.-38     	; 0x9ee <displayGameOverScreen+0x24>
 a14:	df 5f       	subi	r29, 0xFF	; 255
 a16:	80 e1       	ldi	r24, 0x10	; 16
 a18:	e8 0e       	add	r14, r24
 a1a:	f1 1c       	adc	r15, r1
	}
}

void displayGameOverScreen()
{
	for (int i=0; i<16; i++) {
 a1c:	d0 31       	cpi	r29, 0x10	; 16
 a1e:	11 f7       	brne	.-60     	; 0x9e4 <displayGameOverScreen+0x1a>
			}
			_delay_us(RENDER_DELAY_US);
			reset();
		}
	}
}
 a20:	df 91       	pop	r29
 a22:	cf 91       	pop	r28
 a24:	1f 91       	pop	r17
 a26:	0f 91       	pop	r16
 a28:	ff 90       	pop	r15
 a2a:	ef 90       	pop	r14
 a2c:	08 95       	ret

00000a2e <displayWinScreen>:


void displayWinScreen()
{
 a2e:	ef 92       	push	r14
 a30:	ff 92       	push	r15
 a32:	0f 93       	push	r16
 a34:	1f 93       	push	r17
 a36:	cf 93       	push	r28
 a38:	df 93       	push	r29
 a3a:	0f 2e       	mov	r0, r31
 a3c:	fc e6       	ldi	r31, 0x6C	; 108
 a3e:	ef 2e       	mov	r14, r31
 a40:	f2 e0       	ldi	r31, 0x02	; 2
 a42:	ff 2e       	mov	r15, r31
 a44:	f0 2d       	mov	r31, r0
 a46:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i=0; i<16; i++) {
		setBoardCommon(i);
 a48:	8d 2f       	mov	r24, r29
 a4a:	0e 94 57 00 	call	0xae	; 0xae <setBoardCommon>
 a4e:	87 01       	movw	r16, r14
 a50:	c0 e0       	ldi	r28, 0x00	; 0
		for (int j=0; j<16; j++) {
			if (winScreen[i][j] == '.')			continue;
 a52:	f8 01       	movw	r30, r16
 a54:	81 91       	ld	r24, Z+
 a56:	8f 01       	movw	r16, r30
 a58:	8e 32       	cpi	r24, 0x2E	; 46
 a5a:	59 f0       	breq	.+22     	; 0xa72 <displayWinScreen+0x44>
			else if (winScreen[i][j] == '#') {
 a5c:	83 32       	cpi	r24, 0x23	; 35
 a5e:	19 f4       	brne	.+6      	; 0xa66 <displayWinScreen+0x38>
				setBoardRed(j);
 a60:	8c 2f       	mov	r24, r28
 a62:	0e 94 5f 00 	call	0xbe	; 0xbe <setBoardRed>
 a66:	f2 e4       	ldi	r31, 0x42	; 66
 a68:	fa 95       	dec	r31
 a6a:	f1 f7       	brne	.-4      	; 0xa68 <displayWinScreen+0x3a>
 a6c:	00 c0       	rjmp	.+0      	; 0xa6e <displayWinScreen+0x40>
			}
			_delay_us(RENDER_DELAY_US);
			reset();
 a6e:	0e 94 74 00 	call	0xe8	; 0xe8 <reset>
 a72:	cf 5f       	subi	r28, 0xFF	; 255

void displayWinScreen()
{
	for (int i=0; i<16; i++) {
		setBoardCommon(i);
		for (int j=0; j<16; j++) {
 a74:	c0 31       	cpi	r28, 0x10	; 16
 a76:	69 f7       	brne	.-38     	; 0xa52 <displayWinScreen+0x24>
 a78:	df 5f       	subi	r29, 0xFF	; 255
 a7a:	80 e1       	ldi	r24, 0x10	; 16
 a7c:	e8 0e       	add	r14, r24
 a7e:	f1 1c       	adc	r15, r1
}


void displayWinScreen()
{
	for (int i=0; i<16; i++) {
 a80:	d0 31       	cpi	r29, 0x10	; 16
 a82:	11 f7       	brne	.-60     	; 0xa48 <displayWinScreen+0x1a>
			}
			_delay_us(RENDER_DELAY_US);
			reset();
		}
	}
}
 a84:	df 91       	pop	r29
 a86:	cf 91       	pop	r28
 a88:	1f 91       	pop	r17
 a8a:	0f 91       	pop	r16
 a8c:	ff 90       	pop	r15
 a8e:	ef 90       	pop	r14
 a90:	08 95       	ret

00000a92 <isFoodLeft>:


int isFoodLeft() {
	for (int i=0; i<16; i++) {
 a92:	60 e0       	ldi	r22, 0x00	; 0
 a94:	70 e0       	ldi	r23, 0x00	; 0
 a96:	1a c0       	rjmp	.+52     	; 0xacc <isFoodLeft+0x3a>
		for (int j=0; j<16; j++) {
			if (background[i][j] == 'F')			return 1;
 a98:	81 e0       	ldi	r24, 0x01	; 1
 a9a:	90 e0       	ldi	r25, 0x00	; 0
 a9c:	ab 01       	movw	r20, r22
 a9e:	42 95       	swap	r20
 aa0:	52 95       	swap	r21
 aa2:	50 7f       	andi	r21, 0xF0	; 240
 aa4:	54 27       	eor	r21, r20
 aa6:	40 7f       	andi	r20, 0xF0	; 240
 aa8:	54 27       	eor	r21, r20
 aaa:	44 59       	subi	r20, 0x94	; 148
 aac:	5f 4f       	sbci	r21, 0xFF	; 255
 aae:	fa 01       	movw	r30, r20
 ab0:	e8 0f       	add	r30, r24
 ab2:	f9 1f       	adc	r31, r25
 ab4:	20 81       	ld	r18, Z
 ab6:	26 34       	cpi	r18, 0x46	; 70
 ab8:	c1 f0       	breq	.+48     	; 0xaea <isFoodLeft+0x58>
}


int isFoodLeft() {
	for (int i=0; i<16; i++) {
		for (int j=0; j<16; j++) {
 aba:	01 96       	adiw	r24, 0x01	; 1
 abc:	80 31       	cpi	r24, 0x10	; 16
 abe:	91 05       	cpc	r25, r1
 ac0:	b1 f7       	brne	.-20     	; 0xaae <isFoodLeft+0x1c>
	}
}


int isFoodLeft() {
	for (int i=0; i<16; i++) {
 ac2:	6f 5f       	subi	r22, 0xFF	; 255
 ac4:	7f 4f       	sbci	r23, 0xFF	; 255
 ac6:	60 31       	cpi	r22, 0x10	; 16
 ac8:	71 05       	cpc	r23, r1
 aca:	91 f0       	breq	.+36     	; 0xaf0 <isFoodLeft+0x5e>
		for (int j=0; j<16; j++) {
			if (background[i][j] == 'F')			return 1;
 acc:	fb 01       	movw	r30, r22
 ace:	e2 95       	swap	r30
 ad0:	f2 95       	swap	r31
 ad2:	f0 7f       	andi	r31, 0xF0	; 240
 ad4:	fe 27       	eor	r31, r30
 ad6:	e0 7f       	andi	r30, 0xF0	; 240
 ad8:	fe 27       	eor	r31, r30
 ada:	e4 59       	subi	r30, 0x94	; 148
 adc:	ff 4f       	sbci	r31, 0xFF	; 255
 ade:	80 81       	ld	r24, Z
 ae0:	86 34       	cpi	r24, 0x46	; 70
 ae2:	d1 f6       	brne	.-76     	; 0xa98 <isFoodLeft+0x6>
 ae4:	81 e0       	ldi	r24, 0x01	; 1
 ae6:	90 e0       	ldi	r25, 0x00	; 0
 ae8:	08 95       	ret
 aea:	81 e0       	ldi	r24, 0x01	; 1
 aec:	90 e0       	ldi	r25, 0x00	; 0
 aee:	08 95       	ret
		}
	}
	return 0;
 af0:	80 e0       	ldi	r24, 0x00	; 0
 af2:	90 e0       	ldi	r25, 0x00	; 0
}
 af4:	08 95       	ret

00000af6 <main>:


int main(void) {
 af6:	0f 93       	push	r16
 af8:	1f 93       	push	r17
 afa:	cf 93       	push	r28
 afc:	df 93       	push	r29
	MCUCSR |= 1 << JTD;
 afe:	84 b7       	in	r24, 0x34	; 52
 b00:	80 68       	ori	r24, 0x80	; 128
 b02:	84 bf       	out	0x34, r24	; 52
	MCUCSR |= 1 << JTD;
 b04:	84 b7       	in	r24, 0x34	; 52
 b06:	80 68       	ori	r24, 0x80	; 128
 b08:	84 bf       	out	0x34, r24	; 52

	ledMatrixInit();
 b0a:	0e 94 49 00 	call	0x92	; 0x92 <ledMatrixInit>
	controlInit();
 b0e:	0e 94 51 00 	call	0xa2	; 0xa2 <controlInit>
	buzzerInit();
 b12:	0e 94 55 00 	call	0xaa	; 0xaa <buzzerInit>
 b16:	c4 e6       	ldi	r28, 0x64	; 100
 b18:	d0 e0       	ldi	r29, 0x00	; 0
	
    /* Replace with your application code */
	
	for (int i=0; i<FRAME_RATE*5; i++) {
		displayStartScreen();
 b1a:	0e 94 b3 04 	call	0x966	; 0x966 <displayStartScreen>
 b1e:	21 97       	sbiw	r28, 0x01	; 1
	controlInit();
	buzzerInit();
	
    /* Replace with your application code */
	
	for (int i=0; i<FRAME_RATE*5; i++) {
 b20:	e1 f7       	brne	.-8      	; 0xb1a <main+0x24>
		for (int i=0; i<FRAME_RATE; i++) {
			displayBoard();
			buzz();
		}
		
		if (!isFoodLeft())	gameWin = 1;
 b22:	01 e0       	ldi	r16, 0x01	; 1
 b24:	10 e0       	ldi	r17, 0x00	; 0
	for (int i=0; i<FRAME_RATE*5; i++) {
		displayStartScreen();
	}
	
	while(1) {
		int direction = PINB & 0x03;
 b26:	86 b3       	in	r24, 0x16	; 22
		movePacman(direction);
 b28:	83 70       	andi	r24, 0x03	; 3
 b2a:	90 e0       	ldi	r25, 0x00	; 0
 b2c:	0e 94 b0 01 	call	0x360	; 0x360 <movePacman>
		for (int i=0; i<GHOST_COUNT; i++) {
			if (ghostEnabled) {
 b30:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <ghostEnabled>
 b34:	90 91 87 05 	lds	r25, 0x0587	; 0x800587 <ghostEnabled+0x1>
 b38:	89 2b       	or	r24, r25
 b3a:	49 f0       	breq	.+18     	; 0xb4e <main+0x58>
	}
	return ans;
}

int ghostStrategy(int id) {
	return ghostStrategyShortestPath(id);
 b3c:	80 e0       	ldi	r24, 0x00	; 0
 b3e:	90 e0       	ldi	r25, 0x00	; 0
 b40:	0e 94 78 03 	call	0x6f0	; 0x6f0 <ghostStrategyShortestPath>
	while(1) {
		int direction = PINB & 0x03;
		movePacman(direction);
		for (int i=0; i<GHOST_COUNT; i++) {
			if (ghostEnabled) {
				moveGhost(i, ghostStrategy(i));
 b44:	bc 01       	movw	r22, r24
 b46:	80 e0       	ldi	r24, 0x00	; 0
 b48:	90 e0       	ldi	r25, 0x00	; 0
 b4a:	0e 94 fd 02 	call	0x5fa	; 0x5fa <moveGhost>
			}
		}
		
		makeBoard();
 b4e:	0e 94 78 00 	call	0xf0	; 0xf0 <makeBoard>
 b52:	c4 e1       	ldi	r28, 0x14	; 20
 b54:	d0 e0       	ldi	r29, 0x00	; 0
		for (int i=0; i<FRAME_RATE; i++) {
			displayBoard();
 b56:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <displayBoard>
			buzz();
 b5a:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <buzz>
 b5e:	21 97       	sbiw	r28, 0x01	; 1
				moveGhost(i, ghostStrategy(i));
			}
		}
		
		makeBoard();
		for (int i=0; i<FRAME_RATE; i++) {
 b60:	d1 f7       	brne	.-12     	; 0xb56 <main+0x60>
			displayBoard();
			buzz();
		}
		
		if (!isFoodLeft())	gameWin = 1;
 b62:	0e 94 49 05 	call	0xa92	; 0xa92 <isFoodLeft>
 b66:	89 2b       	or	r24, r25
 b68:	21 f4       	brne	.+8      	; 0xb72 <main+0x7c>
 b6a:	10 93 82 05 	sts	0x0582, r17	; 0x800582 <gameWin+0x1>
 b6e:	00 93 81 05 	sts	0x0581, r16	; 0x800581 <gameWin>
		if(gameOver || gameWin)		break;
 b72:	80 91 7d 05 	lds	r24, 0x057D	; 0x80057d <gameOver>
 b76:	90 91 7e 05 	lds	r25, 0x057E	; 0x80057e <gameOver+0x1>
 b7a:	89 2b       	or	r24, r25
 b7c:	39 f0       	breq	.+14     	; 0xb8c <main+0x96>
	}
	
	while(gameOver) {
 b7e:	80 91 7d 05 	lds	r24, 0x057D	; 0x80057d <gameOver>
 b82:	90 91 7e 05 	lds	r25, 0x057E	; 0x80057e <gameOver+0x1>
 b86:	89 2b       	or	r24, r25
 b88:	41 f4       	brne	.+16     	; 0xb9a <main+0xa4>
 b8a:	0f c0       	rjmp	.+30     	; 0xbaa <main+0xb4>
			displayBoard();
			buzz();
		}
		
		if (!isFoodLeft())	gameWin = 1;
		if(gameOver || gameWin)		break;
 b8c:	80 91 81 05 	lds	r24, 0x0581	; 0x800581 <gameWin>
 b90:	90 91 82 05 	lds	r25, 0x0582	; 0x800582 <gameWin+0x1>
 b94:	89 2b       	or	r24, r25
 b96:	39 f2       	breq	.-114    	; 0xb26 <main+0x30>
 b98:	f2 cf       	rjmp	.-28     	; 0xb7e <main+0x88>
	}
	
	while(gameOver) {
		displayGameOverScreen();
 b9a:	0e 94 e5 04 	call	0x9ca	; 0x9ca <displayGameOverScreen>
		
		if (!isFoodLeft())	gameWin = 1;
		if(gameOver || gameWin)		break;
	}
	
	while(gameOver) {
 b9e:	80 91 7d 05 	lds	r24, 0x057D	; 0x80057d <gameOver>
 ba2:	90 91 7e 05 	lds	r25, 0x057E	; 0x80057e <gameOver+0x1>
 ba6:	89 2b       	or	r24, r25
 ba8:	c1 f7       	brne	.-16     	; 0xb9a <main+0xa4>
		displayGameOverScreen();
	}
	
	while(gameWin) {
 baa:	80 91 81 05 	lds	r24, 0x0581	; 0x800581 <gameWin>
 bae:	90 91 82 05 	lds	r25, 0x0582	; 0x800582 <gameWin+0x1>
 bb2:	89 2b       	or	r24, r25
 bb4:	41 f0       	breq	.+16     	; 0xbc6 <main+0xd0>
		displayWinScreen();
 bb6:	0e 94 17 05 	call	0xa2e	; 0xa2e <displayWinScreen>
	
	while(gameOver) {
		displayGameOverScreen();
	}
	
	while(gameWin) {
 bba:	80 91 81 05 	lds	r24, 0x0581	; 0x800581 <gameWin>
 bbe:	90 91 82 05 	lds	r25, 0x0582	; 0x800582 <gameWin+0x1>
 bc2:	89 2b       	or	r24, r25
 bc4:	c1 f7       	brne	.-16     	; 0xbb6 <main+0xc0>
		displayWinScreen();
	}	
}
 bc6:	80 e0       	ldi	r24, 0x00	; 0
 bc8:	90 e0       	ldi	r25, 0x00	; 0
 bca:	df 91       	pop	r29
 bcc:	cf 91       	pop	r28
 bce:	1f 91       	pop	r17
 bd0:	0f 91       	pop	r16
 bd2:	08 95       	ret

00000bd4 <_exit>:
 bd4:	f8 94       	cli

00000bd6 <__stop_program>:
 bd6:	ff cf       	rjmp	.-2      	; 0xbd6 <__stop_program>
