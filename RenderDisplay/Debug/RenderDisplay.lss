
RenderDisplay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000304  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000106  00800060  00000304  00000398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000102  00800166  00800166  0000049e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000049e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  0000050c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000932  00000000  00000000  00000564  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000067c  00000000  00000000  00000e96  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ca  00000000  00000000  00001512  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b4  00000000  00000000  000018dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003af  00000000  00000000  00001990  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001cb  00000000  00000000  00001d3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00001f0a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e0       	ldi	r30, 0x04	; 4
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	22 e0       	ldi	r18, 0x02	; 2
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 36       	cpi	r26, 0x68	; 104
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 4b 01 	call	0x296	; 0x296 <main>
  8a:	0c 94 80 01 	jmp	0x300	; 0x300 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <reset>:

const int gx[GHOST_COUNT] = {13};
const int gy[GHOST_COUNT] = {5};

void reset() {
	PORTC |= 0b11000000;
  92:	85 b3       	in	r24, 0x15	; 21
  94:	80 6c       	ori	r24, 0xC0	; 192
  96:	85 bb       	out	0x15, r24	; 21
  98:	08 95       	ret

0000009a <ledMatrixInit>:
	C - A6
	D - A7
	Control - C7
	*/
	
	DDRA = 0b11111111;
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0b11001111;
  9e:	8f ec       	ldi	r24, 0xCF	; 207
  a0:	84 bb       	out	0x14, r24	; 20
	reset();
  a2:	0e 94 49 00 	call	0x92	; 0x92 <reset>
  a6:	08 95       	ret

000000a8 <setBoardCommon>:
		
}

void setBoardCommon(unsigned char row) {
	PORTC &= 0xF0;
  a8:	95 b3       	in	r25, 0x15	; 21
  aa:	90 7f       	andi	r25, 0xF0	; 240
  ac:	95 bb       	out	0x15, r25	; 21
	PORTC |= (0x0F & row);
  ae:	95 b3       	in	r25, 0x15	; 21
  b0:	8f 70       	andi	r24, 0x0F	; 15
  b2:	98 2b       	or	r25, r24
  b4:	95 bb       	out	0x15, r25	; 21
  b6:	08 95       	ret

000000b8 <setBoardRed>:
}


void setBoardRed(unsigned char column) {
	PORTC &= 0b10111111;
  b8:	ae 98       	cbi	0x15, 6	; 21
	PORTA &= 0xF0;
  ba:	9b b3       	in	r25, 0x1b	; 27
  bc:	90 7f       	andi	r25, 0xF0	; 240
  be:	9b bb       	out	0x1b, r25	; 27
	PORTA |= (0x0F & column);
  c0:	9b b3       	in	r25, 0x1b	; 27
  c2:	8f 70       	andi	r24, 0x0F	; 15
  c4:	98 2b       	or	r25, r24
  c6:	9b bb       	out	0x1b, r25	; 27
  c8:	08 95       	ret

000000ca <setBoardGreen>:
}


void setBoardGreen(unsigned char column) {
	PORTC &= 0b01111111;
  ca:	af 98       	cbi	0x15, 7	; 21
	PORTA &= 0x0F;
  cc:	9b b3       	in	r25, 0x1b	; 27
  ce:	9f 70       	andi	r25, 0x0F	; 15
  d0:	9b bb       	out	0x1b, r25	; 27
	PORTA |= (0xF0 & (column << 4));
  d2:	2b b3       	in	r18, 0x1b	; 27
  d4:	30 e1       	ldi	r19, 0x10	; 16
  d6:	83 9f       	mul	r24, r19
  d8:	c0 01       	movw	r24, r0
  da:	11 24       	eor	r1, r1
  dc:	82 2b       	or	r24, r18
  de:	8b bb       	out	0x1b, r24	; 27
  e0:	08 95       	ret

000000e2 <MakeBoard>:

const int RENDER_DELAY = 30;


void MakeBoard() {
	for (int i=0; i<16; i++)
  e2:	a0 e0       	ldi	r26, 0x00	; 0
  e4:	b0 e0       	ldi	r27, 0x00	; 0
  e6:	10 c0       	rjmp	.+32     	; 0x108 <MakeBoard+0x26>
		for (int j=0; j<16; j++)
			board[i][j] = background[i][j];
  e8:	fb 01       	movw	r30, r22
  ea:	e8 0f       	add	r30, r24
  ec:	f9 1f       	adc	r31, r25
  ee:	20 81       	ld	r18, Z
  f0:	fa 01       	movw	r30, r20
  f2:	e8 0f       	add	r30, r24
  f4:	f9 1f       	adc	r31, r25
  f6:	20 83       	st	Z, r18
const int RENDER_DELAY = 30;


void MakeBoard() {
	for (int i=0; i<16; i++)
		for (int j=0; j<16; j++)
  f8:	01 96       	adiw	r24, 0x01	; 1
  fa:	80 31       	cpi	r24, 0x10	; 16
  fc:	91 05       	cpc	r25, r1
  fe:	a1 f7       	brne	.-24     	; 0xe8 <MakeBoard+0x6>

const int RENDER_DELAY = 30;


void MakeBoard() {
	for (int i=0; i<16; i++)
 100:	11 96       	adiw	r26, 0x01	; 1
 102:	a0 31       	cpi	r26, 0x10	; 16
 104:	b1 05       	cpc	r27, r1
 106:	79 f0       	breq	.+30     	; 0x126 <MakeBoard+0x44>
}

const int RENDER_DELAY = 30;


void MakeBoard() {
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	90 e0       	ldi	r25, 0x00	; 0
	for (int i=0; i<16; i++)
		for (int j=0; j<16; j++)
			board[i][j] = background[i][j];
 10c:	ad 01       	movw	r20, r26
 10e:	42 95       	swap	r20
 110:	52 95       	swap	r21
 112:	50 7f       	andi	r21, 0xF0	; 240
 114:	54 27       	eor	r21, r20
 116:	40 7f       	andi	r20, 0xF0	; 240
 118:	54 27       	eor	r21, r20
 11a:	ba 01       	movw	r22, r20
 11c:	6c 59       	subi	r22, 0x9C	; 156
 11e:	7f 4f       	sbci	r23, 0xFF	; 255
 120:	4a 59       	subi	r20, 0x9A	; 154
 122:	5e 4f       	sbci	r21, 0xFE	; 254
 124:	e1 cf       	rjmp	.-62     	; 0xe8 <MakeBoard+0x6>
	
	board[px][py] = board[px+1][py] = board[px][py+1] = board[px+1][py+1] = 'P';
 126:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <px>
 12a:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <px+0x1>
 12e:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <__data_start>
 132:	50 91 61 00 	lds	r21, 0x0061	; 0x800061 <__data_start+0x1>
 136:	fa 01       	movw	r30, r20
 138:	31 96       	adiw	r30, 0x01	; 1
 13a:	9c 01       	movw	r18, r24
 13c:	22 95       	swap	r18
 13e:	32 95       	swap	r19
 140:	30 7f       	andi	r19, 0xF0	; 240
 142:	32 27       	eor	r19, r18
 144:	20 7f       	andi	r18, 0xF0	; 240
 146:	32 27       	eor	r19, r18
 148:	2a 58       	subi	r18, 0x8A	; 138
 14a:	3e 4f       	sbci	r19, 0xFE	; 254
 14c:	d9 01       	movw	r26, r18
 14e:	ae 0f       	add	r26, r30
 150:	bf 1f       	adc	r27, r31
 152:	60 e5       	ldi	r22, 0x50	; 80
 154:	6c 93       	st	X, r22
 156:	82 95       	swap	r24
 158:	92 95       	swap	r25
 15a:	90 7f       	andi	r25, 0xF0	; 240
 15c:	98 27       	eor	r25, r24
 15e:	80 7f       	andi	r24, 0xF0	; 240
 160:	98 27       	eor	r25, r24
 162:	8a 59       	subi	r24, 0x9A	; 154
 164:	9e 4f       	sbci	r25, 0xFE	; 254
 166:	e8 0f       	add	r30, r24
 168:	f9 1f       	adc	r31, r25
 16a:	60 83       	st	Z, r22
 16c:	f9 01       	movw	r30, r18
 16e:	e4 0f       	add	r30, r20
 170:	f5 1f       	adc	r31, r21
 172:	60 83       	st	Z, r22
 174:	fc 01       	movw	r30, r24
 176:	e4 0f       	add	r30, r20
 178:	f5 1f       	adc	r31, r21
 17a:	60 83       	st	Z, r22
	
	for (int i=0; i<GHOST_COUNT; i++)
	board[gx[i]][gy[i]] = board[gx[i]+1][gy[i]] = board[gx[i]][gy[i]+1] = board[gx[i]+1][gy[i]+1] =  '1';
 17c:	81 e3       	ldi	r24, 0x31	; 49
 17e:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <__data_end+0xe6>
 182:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <__data_end+0xd6>
 186:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <__data_end+0xe5>
 18a:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <__data_end+0xd5>
 18e:	08 95       	ret

00000190 <DisplayBoard>:
}

void DisplayBoard() {
 190:	ef 92       	push	r14
 192:	ff 92       	push	r15
 194:	0f 93       	push	r16
 196:	1f 93       	push	r17
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
	for (int i=0; i<16; i++) {
 19c:	e1 2c       	mov	r14, r1
 19e:	f1 2c       	mov	r15, r1
		setBoardCommon(i);
 1a0:	8e 2d       	mov	r24, r14
 1a2:	0e 94 54 00 	call	0xa8	; 0xa8 <setBoardCommon>
		for (int j=0; j<16; j++) {
 1a6:	c0 e0       	ldi	r28, 0x00	; 0
 1a8:	d0 e0       	ldi	r29, 0x00	; 0
			if (board[i][j] == '.')			continue;
 1aa:	87 01       	movw	r16, r14
 1ac:	02 95       	swap	r16
 1ae:	12 95       	swap	r17
 1b0:	10 7f       	andi	r17, 0xF0	; 240
 1b2:	10 27       	eor	r17, r16
 1b4:	00 7f       	andi	r16, 0xF0	; 240
 1b6:	10 27       	eor	r17, r16
 1b8:	0a 59       	subi	r16, 0x9A	; 154
 1ba:	1e 4f       	sbci	r17, 0xFE	; 254
 1bc:	f8 01       	movw	r30, r16
 1be:	ec 0f       	add	r30, r28
 1c0:	fd 1f       	adc	r31, r29
 1c2:	80 81       	ld	r24, Z
 1c4:	8e 32       	cpi	r24, 0x2E	; 46
 1c6:	09 f4       	brne	.+2      	; 0x1ca <DisplayBoard+0x3a>
 1c8:	52 c0       	rjmp	.+164    	; 0x26e <DisplayBoard+0xde>
			else if (board[i][j] == '#') {
 1ca:	f8 01       	movw	r30, r16
 1cc:	ec 0f       	add	r30, r28
 1ce:	fd 1f       	adc	r31, r29
 1d0:	80 81       	ld	r24, Z
 1d2:	83 32       	cpi	r24, 0x23	; 35
 1d4:	21 f4       	brne	.+8      	; 0x1de <DisplayBoard+0x4e>
				setBoardRed(j);
 1d6:	8c 2f       	mov	r24, r28
 1d8:	0e 94 5c 00 	call	0xb8	; 0xb8 <setBoardRed>
 1dc:	43 c0       	rjmp	.+134    	; 0x264 <DisplayBoard+0xd4>
			}
			else if (board[i][j] == '1') {
 1de:	f8 01       	movw	r30, r16
 1e0:	ec 0f       	add	r30, r28
 1e2:	fd 1f       	adc	r31, r29
 1e4:	80 81       	ld	r24, Z
 1e6:	81 33       	cpi	r24, 0x31	; 49
 1e8:	21 f4       	brne	.+8      	; 0x1f2 <DisplayBoard+0x62>
				setBoardGreen(j);
 1ea:	8c 2f       	mov	r24, r28
 1ec:	0e 94 65 00 	call	0xca	; 0xca <setBoardGreen>
 1f0:	39 c0       	rjmp	.+114    	; 0x264 <DisplayBoard+0xd4>
			}
			else if (board[i][j] == 'P') {
 1f2:	f8 01       	movw	r30, r16
 1f4:	ec 0f       	add	r30, r28
 1f6:	fd 1f       	adc	r31, r29
 1f8:	80 81       	ld	r24, Z
 1fa:	80 35       	cpi	r24, 0x50	; 80
 1fc:	39 f4       	brne	.+14     	; 0x20c <DisplayBoard+0x7c>
				setBoardGreen(j);
 1fe:	8c 2f       	mov	r24, r28
 200:	0e 94 65 00 	call	0xca	; 0xca <setBoardGreen>
				setBoardRed(j);
 204:	8c 2f       	mov	r24, r28
 206:	0e 94 5c 00 	call	0xb8	; 0xb8 <setBoardRed>
 20a:	2c c0       	rjmp	.+88     	; 0x264 <DisplayBoard+0xd4>
			}
			else if (board[i][j] == 'F') {
 20c:	f8 01       	movw	r30, r16
 20e:	ec 0f       	add	r30, r28
 210:	fd 1f       	adc	r31, r29
 212:	80 81       	ld	r24, Z
 214:	86 34       	cpi	r24, 0x46	; 70
 216:	31 f5       	brne	.+76     	; 0x264 <DisplayBoard+0xd4>
				foodBlinkState = (foodBlinkState+1)%BLINK_RANGE;
 218:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <foodBlinkState>
 21c:	90 91 67 02 	lds	r25, 0x0267	; 0x800267 <foodBlinkState+0x1>
 220:	60 91 64 01 	lds	r22, 0x0164	; 0x800164 <BLINK_RANGE>
 224:	70 91 65 01 	lds	r23, 0x0165	; 0x800165 <BLINK_RANGE+0x1>
 228:	01 96       	adiw	r24, 0x01	; 1
 22a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <__divmodhi4>
 22e:	90 93 67 02 	sts	0x0267, r25	; 0x800267 <foodBlinkState+0x1>
 232:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <foodBlinkState>
				if (foodBlinkState<BLINK_RANGE/2)		continue;
 236:	20 91 64 01 	lds	r18, 0x0164	; 0x800164 <BLINK_RANGE>
 23a:	30 91 65 01 	lds	r19, 0x0165	; 0x800165 <BLINK_RANGE+0x1>
 23e:	40 91 66 02 	lds	r20, 0x0266	; 0x800266 <foodBlinkState>
 242:	50 91 67 02 	lds	r21, 0x0267	; 0x800267 <foodBlinkState+0x1>
 246:	c9 01       	movw	r24, r18
 248:	99 23       	and	r25, r25
 24a:	0c f4       	brge	.+2      	; 0x24e <DisplayBoard+0xbe>
 24c:	01 96       	adiw	r24, 0x01	; 1
 24e:	95 95       	asr	r25
 250:	87 95       	ror	r24
 252:	48 17       	cp	r20, r24
 254:	59 07       	cpc	r21, r25
 256:	5c f0       	brlt	.+22     	; 0x26e <DisplayBoard+0xde>
				setBoardGreen(j);
 258:	8c 2f       	mov	r24, r28
 25a:	0e 94 65 00 	call	0xca	; 0xca <setBoardGreen>
				setBoardRed(j);
 25e:	8c 2f       	mov	r24, r28
 260:	0e 94 5c 00 	call	0xb8	; 0xb8 <setBoardRed>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 264:	80 e5       	ldi	r24, 0x50	; 80
 266:	8a 95       	dec	r24
 268:	f1 f7       	brne	.-4      	; 0x266 <DisplayBoard+0xd6>
				
			}
			_delay_us(RENDER_DELAY);
			reset();
 26a:	0e 94 49 00 	call	0x92	; 0x92 <reset>
}

void DisplayBoard() {
	for (int i=0; i<16; i++) {
		setBoardCommon(i);
		for (int j=0; j<16; j++) {
 26e:	21 96       	adiw	r28, 0x01	; 1
 270:	c0 31       	cpi	r28, 0x10	; 16
 272:	d1 05       	cpc	r29, r1
 274:	09 f0       	breq	.+2      	; 0x278 <DisplayBoard+0xe8>
 276:	a2 cf       	rjmp	.-188    	; 0x1bc <DisplayBoard+0x2c>
	for (int i=0; i<GHOST_COUNT; i++)
	board[gx[i]][gy[i]] = board[gx[i]+1][gy[i]] = board[gx[i]][gy[i]+1] = board[gx[i]+1][gy[i]+1] =  '1';
}

void DisplayBoard() {
	for (int i=0; i<16; i++) {
 278:	8f ef       	ldi	r24, 0xFF	; 255
 27a:	e8 1a       	sub	r14, r24
 27c:	f8 0a       	sbc	r15, r24
 27e:	80 e1       	ldi	r24, 0x10	; 16
 280:	e8 16       	cp	r14, r24
 282:	f1 04       	cpc	r15, r1
 284:	09 f0       	breq	.+2      	; 0x288 <DisplayBoard+0xf8>
 286:	8c cf       	rjmp	.-232    	; 0x1a0 <DisplayBoard+0x10>
			_delay_us(RENDER_DELAY);
			reset();
		}	
	}
	
}
 288:	df 91       	pop	r29
 28a:	cf 91       	pop	r28
 28c:	1f 91       	pop	r17
 28e:	0f 91       	pop	r16
 290:	ff 90       	pop	r15
 292:	ef 90       	pop	r14
 294:	08 95       	ret

00000296 <main>:

int main(void)
{
	MCUCSR |= 1 << JTD;
 296:	84 b7       	in	r24, 0x34	; 52
 298:	80 68       	ori	r24, 0x80	; 128
 29a:	84 bf       	out	0x34, r24	; 52
	MCUCSR |= 1 << JTD;
 29c:	84 b7       	in	r24, 0x34	; 52
 29e:	80 68       	ori	r24, 0x80	; 128
 2a0:	84 bf       	out	0x34, r24	; 52

	ledMatrixInit();
 2a2:	0e 94 4d 00 	call	0x9a	; 0x9a <ledMatrixInit>

    /* Replace with your application code */
	
	while(1) {
		MakeBoard();
 2a6:	0e 94 71 00 	call	0xe2	; 0xe2 <MakeBoard>
		DisplayBoard();
 2aa:	0e 94 c8 00 	call	0x190	; 0x190 <DisplayBoard>
 2ae:	fb cf       	rjmp	.-10     	; 0x2a6 <main+0x10>

000002b0 <__divmodhi4>:
 2b0:	97 fb       	bst	r25, 7
 2b2:	07 2e       	mov	r0, r23
 2b4:	16 f4       	brtc	.+4      	; 0x2ba <__divmodhi4+0xa>
 2b6:	00 94       	com	r0
 2b8:	07 d0       	rcall	.+14     	; 0x2c8 <__divmodhi4_neg1>
 2ba:	77 fd       	sbrc	r23, 7
 2bc:	09 d0       	rcall	.+18     	; 0x2d0 <__divmodhi4_neg2>
 2be:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <__udivmodhi4>
 2c2:	07 fc       	sbrc	r0, 7
 2c4:	05 d0       	rcall	.+10     	; 0x2d0 <__divmodhi4_neg2>
 2c6:	3e f4       	brtc	.+14     	; 0x2d6 <__divmodhi4_exit>

000002c8 <__divmodhi4_neg1>:
 2c8:	90 95       	com	r25
 2ca:	81 95       	neg	r24
 2cc:	9f 4f       	sbci	r25, 0xFF	; 255
 2ce:	08 95       	ret

000002d0 <__divmodhi4_neg2>:
 2d0:	70 95       	com	r23
 2d2:	61 95       	neg	r22
 2d4:	7f 4f       	sbci	r23, 0xFF	; 255

000002d6 <__divmodhi4_exit>:
 2d6:	08 95       	ret

000002d8 <__udivmodhi4>:
 2d8:	aa 1b       	sub	r26, r26
 2da:	bb 1b       	sub	r27, r27
 2dc:	51 e1       	ldi	r21, 0x11	; 17
 2de:	07 c0       	rjmp	.+14     	; 0x2ee <__udivmodhi4_ep>

000002e0 <__udivmodhi4_loop>:
 2e0:	aa 1f       	adc	r26, r26
 2e2:	bb 1f       	adc	r27, r27
 2e4:	a6 17       	cp	r26, r22
 2e6:	b7 07       	cpc	r27, r23
 2e8:	10 f0       	brcs	.+4      	; 0x2ee <__udivmodhi4_ep>
 2ea:	a6 1b       	sub	r26, r22
 2ec:	b7 0b       	sbc	r27, r23

000002ee <__udivmodhi4_ep>:
 2ee:	88 1f       	adc	r24, r24
 2f0:	99 1f       	adc	r25, r25
 2f2:	5a 95       	dec	r21
 2f4:	a9 f7       	brne	.-22     	; 0x2e0 <__udivmodhi4_loop>
 2f6:	80 95       	com	r24
 2f8:	90 95       	com	r25
 2fa:	bc 01       	movw	r22, r24
 2fc:	cd 01       	movw	r24, r26
 2fe:	08 95       	ret

00000300 <_exit>:
 300:	f8 94       	cli

00000302 <__stop_program>:
 302:	ff cf       	rjmp	.-2      	; 0x302 <__stop_program>
